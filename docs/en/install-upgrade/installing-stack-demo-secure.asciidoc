// for testing:
:version: 8.11.1

[[install-stack-demo-secure]]
=== Tutorial 2: Securing a self-managed {stack}

This tutorial is a follow-on to  <<installing-stack-demo-self>>. These steps guide you through the process of configuring secure communications throughout your on-premise {stack} install.

Beginning with Elastic 8.0, security is enabled in the {stack} by default, meaning that traffic between {es} nodes and between {kib} and {es} is SSL-encrypted.
While this is suitable for testing non-production viability of the Elastic platform, most production networks have requirements for the use of trusted CA-signed certificates.
These steps demonstrate how to update the out-of-the-box self-signed certificates with your own trusted CA-signed certificates.

For traffic to be encrypted between {es} cluster nodes and between {kib} and {es}, SSL certificates must be created for the transport ({es} inter-node communication) and HTTP (for the {es} REST API) layers. This general process is as follows:

* <<install-stack-demo-secure-ca>> 
* <<install-stack-demo-secure-transport>>
* <<install-stack-demo-secure-http>>
* <<install-stack-demo-secure-second-node>>
* <<install-stack-demo-secure-kib-es>>
* <<install-stack-demo-secure-fleet>>

It should take between one and two hours to complete these steps.

[discrete]
[[install-stack-demo-secure-ca]]
== Step 1: Generate a new self-signed CA certificate

In a production environment you would typically use the CA certificate from your own organization, along with the certificate files generated for the hosts where the {stack} is being installed. For demonstration purposes, we'll use the Elastic certificate utility to configure a self-signed CA certificate.

. On the first node in your {es} cluster, generate a CA certificate using the provided certificate utility, `elasticsearch-certutil`. Note that the location of the utility depends on the installation method you used to install {es}. Refer to {ref}/certutil.html[elasticsearch-certutil] for the command details and to {ref}/update-node-certs-different.html[Update security certificates with a different CA] for details about the procedure as a whole.
+
Run the following command. When prompted, specify a unique name for the output file, such as `elastic-stack-ca-new.zip`: 
+
["source","shell"]
----
sudo /usr/share/elasticsearch/bin/elasticsearch-certutil ca -pem
----

. Move the output file to the `/etc/elasticsearch/certs` directory. This directory is created automatically when you install {es}.
+
["source","shell"]
----
sudo mv /usr/share/elasticsearch/elastic-stack-ca-new.zip /etc/elasticsearch/certs/
----

. Change to the certificates directory and unzip the file:
+
["source","shell"]
----
sudo cd /etc/elasticsearch/certs
sudo unzip elastic-stack-ca-new.zip
----

. View the files that were unpacked into a new `ca` directory:
+
["source","shell"]
----
sudo ls ca/
----
+
`ca.crt`:: The generated certificate (or you can substitute this with your own certificate, signed by your organizations's certificate authority)
`ca.key`:: The certificate authority's private key

+
NOTE: These steps to generate new self-signed CA certificates need to be done only on the first {es} node. The other {es} nodes will use the same `ca.crt` and `ca.key` files.

. From the `/ca` directory, import the newly created CA certificate into the {es} truststore. This step ensures that your cluster trusts the new CA certificate.
+
NOTE: On a new installation a new keystore and truststore are created automatically. If you're running these steps on an existing {es} installation and you know the password to the keystore and the truststore, follow the instructions in {ref}/update-node-certs-different.html[Update security certificates with a different CA] to import the CA certificate.
+
Run the `keytool` command as shown, replacing `<password>` with a unique password for the truststore, and store the password securely:
+
["source","shell"]
----
sudo /usr/share/elasticsearch/jdk/bin/keytool -importcert -trustcacerts -noprompt -keystore elastic-stack-ca.p12 -storepass <password> -alias new-ca -file ca.crt
----

. Ensure that the new key was added to the keystore:
+
["source","shell"]
----
keytool -keystore elastic-stack-ca.p12 -list
----
+
Enter your password when prompted. The result should show the details for your newly added key:
+
["source","shell"]
----
Keystore type: jks
Keystore provider: SUN
Your keystore contains 1 entry
new-ca, Jul 12, 2023, trustedCertEntry, 
Certificate fingerprint (SHA-256): F0:86:6B:57:FC...
----

[discrete]
[[install-stack-demo-secure-transport]]
== Step 2: Generate a new certificate for the transport layer

This guide assumes the use of self-signed certificates, but the process to import CA-signed certificates is the same. If you're using a CA provided by your organization, you need to generate Certificate Signing Requests (CSRs) and then use the signed certificates in this step. Once the certificates are generated, whether self-signed or CA-signed, the steps are the same.

. From the {es} installation directory, using the newly-created CA certificate and private key, create a new certificate for your elasticsearch node:
+
["source","shell"]
----
sudo usr/share/elasticsearch/bin/elasticsearch-certutil cert --ca-cert /etc/elasticsearch/certs/ca/ca.crt --ca-key /etc/elasticsearch/certs/ca/ca.key
----
+
When prompted, choose an output file name (you can use the default `elastic-certificates.p12`) and a password for the certificate.

. Move the generated file to the `/etc/elasticsearch/certs` directory:
+
["source","shell"]
----
sudo mv usr/share/elasticsearch/elastic-certificates.p12 /etc/elasticsearch/certs/
----

+
[IMPORTANT]
==== 
If you're running these steps on a production cluster that already contains data:

* In a cluster with multiple {es} nodes, before proceeding you first need to perform a {ref}/restart-cluster.html#restart-cluster-rolling[Rolling restart] beginning with the node where you're updating the keystore. Stop at the `Perform any needed changes` step, and then proceed to the next step in this guide.
* In a single node cluster, stop {es} before proceeding.

If this is the initial installation of this cluster, you can safely proceed to the next step.
====

+
. Because you've created a new truststore and keystore, you need to update the `/etc/elasticsearch/elasticsearch.yml` settings file with the new truststore and keystore filenames.
+
Open the {es} configuration file in a text editor and adjust the following values to reflect the newly created keystore and truststore filenames and paths:
+
["source","shell"]
----
xpack.security.transport.ssl:
   ...
   keystore.path: /etc/elasticsearch/certs/elastic-certificates.p12
   truststore.path: /etc/elasticsearch/certs/elastic-stack-ca.p12
----

[discrete]
[[install-stack-demo-secure-transport-es-keystore]]
=== Update the {es} keystore

{es} uses a separate keystore to hold the passwords of the keystores and truststores holding the CA and node certificates created in the previous steps. Access to this keystore is through the use of a utility called `elasticsearch-keystore`.

. From the {es} installation directory, list the contents of the existing keystore:
+
["source","shell"]
----
/usr/share/elasticsearch/bin/elasticsearch-keystore list
----
+
The results should be like the following:
+
["source","yaml"]
----
keystore.seed
xpack.security.http.ssl.keystore.secure_password
xpack.security.transport.ssl.keystore.secure_password
xpack.security.transport.ssl.truststore.secure_password
----
+
Notice that there are entries for the `transport.ssl.truststore` that holds the CA certificate, the `transport.ssl.keystore` that holds the CA-signed certificates, and the `http.ssl.keystore` for the HTTP layer. These entries were created at installation and need to be replaced with the passwords to the newly-created truststore and keystores.

. Remove the existing keystore values for the default transport keystore and truststore:
+
["source","shell"]
----
sudo usr/share/elasticsearch/bin/elasticsearch-keystore remove xpack.security.transport.ssl.keystore.secure_password

sudo usr/share/elasticsearch/bin/elasticsearch-keystore remove xpack.security.transport.ssl.truststore.secure_password
----

. Update the `elasticsearch-keystore` with the passwords for the new keystore and truststore created in the previous steps. This ensures that {es} can read the new stores:
+
["source","shell"]
----
sudo usr/share/elasticsearch/bin/elasticsearch-keystore add xpack.security.transport.ssl.keystore.secure_password

sudo usr/share/elasticsearch/bin/elasticsearch-keystore add xpack.security.transport.ssl.truststore.secure_password
----

[discrete]
[[install-stack-demo-secure-http]]
== Step 3: Generate new certificate(s) for the HTTP layer

Now that communication between {es} nodes (the transport layer) has been secured with SSL certificates, the same must be done for the communications that use the REST API, including {kib}, clients, and any other components on the HTTP layer.

. Similar to the process for the transport layer, on the first node in your {es} cluster use the certificate utility to generate a CA certificate for HTTP communications:
+
["source","shell"]
----
sudo / usr/share/elasticsearch/bin/elasticsearch-certutil http
----
+
Respond to the command prompts as follows:

* When asked if you want to generate a CSR, enter `n`.
* When asked if you want to use an existing CA, enter `y`.
* Provide the absolute path to your newly created CA certificate: `/etc/elasticsearch/certs/ca/ca.crt`.
* Provide the absolute path to your newly created CA key: `/etc/elasticsearch/certs/ca/ca.key`.
* Enter an expiration value for your certificate. You can enter the validity period in years, months, or days. For example, enter `1y` for one year.
* When asked if you want to generate one certificate per node, enter `y`. You'll be guided through the creation of certificates for each node. Each certificate will have its own private key, and will be issued for a specific hostname or IP address.
.. On separate lines, enter the hostname for your first {es} node, for example `mynode-es1`, and the IP address that clients can use to connect to your node. Note that this is the same value that's described in Step 2 of <<installing-stack-demo-self>>, for example `10.128.0.84`:
+
["source","shell"]
----
mynode-es1
10.128.0.84
----
.. When prompted, confirm that the settings are correct.
.. Add the network IP address for the first {es} node (the same address you specified in the previous step):
+
["source","shell"]
----
10.128.0.84
----
.. When prompted, confirm that the settings are correct.
.. When prompted, choose to generate additional certificates, and then repeat the previous steps to add hostname and IP settings for each node in your {es} cluster.
.. Provide a password for the generated `http.p12` keystore file.
.. The generated files will be included in a zip archive. At the prompt, provide a path and filename for where the archive should be created.
+
For this example we'll use: `/etc/elasticsearch/certs/elasticsearch-ssl-http.zip`:
+
["source","shell"]
----
What filename should be used for the output zip file? [/usr/share/elasticsearch/elasticsearch-ssl-http.zip] /etc/elasticsearch/certs/elasticsearch-ssl-http.zip
----

. Earlier, when you generated the certificate for the transport layer, the default filename was `elastic-certificates.p12`. Now, when generating a certificate for the HTTP layer, the default filename is `http.p12`. This matches the name of the existing HTTP layer certificate file from when the initial {es} cluster was first installed.
+
Just to avoid any possible name collisions, rename the existing `http.p12` file to distinguish it from the newly-created keystore:
+
["source","shell"]
----
mv http.p12 http-old.p12
----

. Unzip the generated `elasticsearch-ssl-http.zip` archive:
+
["source","shell"]
----
unzip elasticsearch-ssl-http.zip
----

. When the archive is unpacked, the certificate files are located in separate directories for each {es} node and for the {kib} node. You can run a recursive `ls` command to view the file structure:
+
["source","shell"]
----
ls -lR elasticsearch kibana
----
+
["source","shell"]
----
elasticsearch:
total 0
drwxr-xr-x. 2 root root 56 Dec 12 19:13 mynode-es1
drwxr-xr-x. 2 root root 72 Dec 12 19:04 mynode-es2
drwxr-xr-x. 2 root root 72 Dec 12 19:04 mynode-es3

elasticsearch/mynode-es1:
total 8
-rw-r--r--. 1 root root 1365 Dec 12 19:04 README.txt
-rw-r--r--. 1 root root  845 Dec 12 19:04 sample-elasticsearch.yml

elasticsearch/mynode-es2:
total 12
-rw-r--r--. 1 root root 3652 Dec 12 19:04 http.p12
-rw-r--r--. 1 root root 1365 Dec 12 19:04 README.txt
-rw-r--r--. 1 root root  845 Dec 12 19:04 sample-elasticsearch.yml

elasticsearch/mynode-es3:
total 12
-rw-r--r--. 1 root root 3652 Dec 12 19:04 http.p12
-rw-r--r--. 1 root root 1365 Dec 12 19:04 README.txt
-rw-r--r--. 1 root root  845 Dec 12 19:04 sample-elasticsearch.yml

kibana:
total 12
-rw-r--r--. 1 root root 1200 Dec 12 19:04 elasticsearch-ca.pem
-rw-r--r--. 1 root root 1306 Dec 12 19:04 README.txt
-rw-r--r--. 1 root root 1052 Dec 12 19:04 sample-kibana.yml
----

. In the directory where you unzipped the archive, replace your existing keystore with the new keystore. The location of your certificate directory may be different than what is shown here, depending on the installation method you chose. Run the `mv` command, replacing `<es1-hostname>` with the hostname of your initial {es} node:
+
["source","shell"]
----
mv elasticsearch/<es1-hostname>/http.p12 /etc/elasticsearch/certs/
----

. Because this is a new keystore, the {es} configuration file needs to be updated with the path to its location. Open `/etc/elasticsearch/elasticsearch.yml` and update the HTTP SSL settings with the new path:
+
["source","yaml"]
----
xpack.security.http.ssl:
  enabled: true
  #keystore.path: certs/http.p12
  keystore.path: /etc/elasticsearch/certs/http.p12
----

. Since you also generated a new keystore password, the {es} keystore needs to be updated as well. From the {es} installation directory, first remove the existing HTTP keystore entry:
+
["source","shell"]
----
./bin/elasticsearch-keystore remove xpack.security.http.ssl.keystore.secure_password
----

. From the {es} installation directory, add the updated HTTP keystore password, using the password you generated for this keystore:
+
["source","shell"]
----
./bin/elasticsearch-keystore add xpack.security.http.ssl.keystore.secure_password
----

. Before restarting {es}, you need to update the permissions and ownership of all of the certificate files.

.. From the `etc/elasticsearch/certs/` directory, change the files to be owned by the `root.elasticsearch` group:
+
["source","shell"]
----
chown root.elasticsearch *
----

.. Change the `/etc/elasticsearch/certs` and `/etc/elasticsearch/ca` directories to be executable by the owner:
+
["source","shell"]
----
chmod 750 /etc/elasticsearch/certs
chmod 750 /etc/elasticsearch/ca
----

. Stop and restart {es}:
+
["source","shell"]
----
sudo systemctl stop elasticsearch.service
sudo systemctl start elasticsearch.service
----

. Run the status command to confirm that {es} is running:
+
["source","shell"]
----
sudo systemctl status elasticsearch.service
----
+
In the event of any problems, you can also monitor the {es} logs for any issues by tailing the {es} log file:
+
["source","shell"]
----
sudo tail -f /var/log/elasticsearch/elasticsearch-demo.log
---- 
+
A line in the log file like the following indicates that SSL has been properly configured:
+
["source","shell"]
----
[2023-07-12T13:11:29,154][INFO ][o.e.x.s.Security         ] [es-ssl-test] Security is enabled
----

[discrete]
[[install-stack-demo-secure-second-node]]
== Step 4: Configure security on additional {es} nodes

Now that the security is configured for the first {es} node, some steps need to be repeated on each additional {es} node.

. To avoid filename collisions, on each additional {es} node rename the existing `http.p12` file:
+
["source","shell"]
----
mv http.p12 http-old.p12
----

. Copy the CA and truststore files that you generated on the first {es} node so that they can be reused on all other nodes:

* Copy the `/ca` directory (that contains `ca.crt` and `ca.key`) from `/etc/elasticsearch/certs/` on the first {es} node to the same path on all other {es} nodes.

* Copy the `elastic-stack-ca.p12` file from `/etc/elasticsearch/certs/` to the /etc/elasticsearch/certs/ directory on all other {es} nodes.

* Copy the `http.p12` file from each node directory in `/etc/elasticsearch/certs/elasticsearch/` (that is, `elasticsearch/mynode-es1`, `elasticsearch/mynode-es2` and `elasticsearch/mynode-es3`) to the `/etc/elasticsearch/certs/` directory on each corresponding cluster node.

. On each {es} node, repeat the steps to generate a new certificate for the transport layer:

.. From the `/etc/elasticsearch/certs` directory, create a new certificate for the {es} node:
+
["source","shell"]
----
sudo usr/share/elasticsearch/bin/elasticsearch-certutil cert --ca-cert /etc/elasticsearch/certs/ca/ca.crt --ca-key /etc/elasticsearch/certs/ca/ca.key
----
+
When prompted, choose an output file name or use the default, and specify a password for the certificate.

.. Update the `/etc/elasticsearch/elasticsearch.yml` settings file with the new truststore and keystore filename and path:
+
["source","shell"]
----
xpack.security.transport.ssl:
   ...
   keystore.path: /etc/elasticsearch/certs/elastic-certificates.p12
   truststore.path: /etc/elasticsearch/certs/elastic-stack-ca.p12
----

.. List the content of the {es} keystore:
+
["source","shell"]
----
/usr/share/elasticsearch/bin/elasticsearch-keystore list
----
+
The results should be like the following:
+
["source","yaml"]
----
keystore.seed
xpack.security.http.ssl.keystore.secure_password
xpack.security.transport.ssl.keystore.secure_password
xpack.security.transport.ssl.truststore.secure_password
----

.. Remove the existing keystore values for the default transport keystore and truststore:
+
["source","shell"]
----
sudo usr/share/elasticsearch/bin/elasticsearch-keystore remove xpack.security.transport.ssl.keystore.secure_password

sudo usr/share/elasticsearch/bin/elasticsearch-keystore remove xpack.security.transport.ssl.truststore.secure_password
----

.. Update the `elasticsearch-keystore` with the passwords for the new keystore and truststore:
+
["source","shell"]
----
sudo usr/share/elasticsearch/bin/elasticsearch-keystore add xpack.security.transport.ssl.keystore.secure_password

sudo usr/share/elasticsearch/bin/elasticsearch-keystore add xpack.security.transport.ssl.truststore.secure_password
----

. For the HTTP layer, the certificates have been generated already on the first {es} node. Each additional {es} node just needs to be configured to use the new certificates.

.. Update the `/etc/elasticsearch/elasticsearch.yml` settings file with the new truststore and keystore filenames:
+
["source","shell"]
----
xpack.security.http.ssl:
  enabled: true
  #keystore.path: certs/http.p12
  keystore.path: /etc/elasticsearch/certs/http.p12
----

.. Remove the existing HTTP keystore entry:
+
["source","shell"]
----
./bin/elasticsearch-keystore remove xpack.security.http.ssl.keystore.secure_password
----

.. Add the updated HTTP keystore password:
+
["source","shell"]
----
./bin/elasticsearch-keystore add xpack.security.http.ssl.keystore.secure_password
----

.. Change the certificate files to be owned by the `root.elasticsearch` group:
+
["source","shell"]
----
chown root.elasticsearch *
----

.. Change the `/etc/elasticsearch/certs` and `/etc/elasticsearch/ca` directories to be executable by the owner:
+
["source","shell"]
----
chmod 750 /etc/elasticsearch/certs
chmod 750 /etc/elasticsearch/ca
----

. Stop and restart {es}. 
+
["source","shell"]
----
sudo systemctl stop elasticsearch.service
sudo systemctl start elasticsearch.service
----

. Run the status command to confirm that {es} is running.
+
["source","shell"]
----
sudo systemctl status elasticsearch.service
----




[discrete]
[[install-stack-demo-secure-kib-es]]
== Step 5: Generate a certificate for {kib} to access {es}
tbd


[discrete]
[[install-stack-demo-secure-fleet]]
== Step 6: Configure {fleet} to use the new certificates
tbd