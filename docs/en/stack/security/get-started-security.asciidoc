[role="xpack"]
[testenv="trial"]
[[security-getting-started]]
== Getting started with security

In this tutorial, you learn how to secure a cluster by configuring users and 
roles and securing communications in {es}, {kib}, {ls}, and {metricbeat}.

[float]
[[get-started-security-prerequisites]]
=== Before you begin

. Install and configure {es}, {kib}, {ls}, and {metricbeat} as described in 
{stack-gs}/get-started-elastic-stack.html[Getting started with the {stack}]. 

. Stop {ls}. The method for starting and stopping {ls} varies depending on whether 
you are running it from the command line or running it as a service. For example, 
if you are running {ls} from the command line, you can stop it by entering 
`Ctrl-C`. See {logstash-ref}/shutdown.html[Shutting down {ls}]. 

. Stop {metricbeat}. For example, enter `Ctrl-C` on the command line where it is 
running.

. Launch the {kib} web interface by pointing your browser to port 5601. For 
example, http://127.0.0.1:5601[http://127.0.0.1:5601].

[role="xpack"]
[[get-started-license]]
=== Install a trial license

include::{docdir}/get-started-trial.asciidoc[]

[role="xpack"]
[[get-started-enable-security]]
=== Enable security in {es}

include::get-started-enable-security.asciidoc[]

NOTE: This tutorial involves a single node cluster, but if you had multiple 
nodes, you would enable {security} on every node in the cluster and configure 
Transport Layer Security (TLS) for internode-communication, which is beyond the 
scope of this tutorial. 

[role="xpack"]
[[get-started-built-in-users]]
=== Create passwords for built-in users

include::get-started-builtin-users.asciidoc[]

You need these built-in users in subsequent steps, so choose passwords that you 
can remember!

NOTE: This tutorial does not use the built-in `apm_system`, `logstash_system`, 
and `beats_system` users, which are typically associated with monitoring. For 
more information, see 
{logstash-ref}/ls-security.html#ls-monitoring-user[Configuring credentials for {ls} monitoring]
and {metricbeat-ref}/monitoring.html[Monitoring {metricbeat}].  
  
[role="xpack"]
[[get-started-kibana-user]]
=== Add the built-in user to {kib}

include::get-started-kibana-users.asciidoc[]

[role="xpack"]
[[get-started-authentication]]
=== Configure authentication

Now that you've set up the built-in users, you need to decide how you want to 
manage all the other users. 

The {stack} _authenticates_ users to ensure that they are valid. The 
authentication process is handled by _realms_. You can use one or more built-in 
realms, such as the native, file, LDAP, PKI, Active Directory, or SAML realms. 
Alternatively, you can create your own custom realms. In this tutorial, we'll  
use a native realm. 

In general, you configure realms by adding `xpack.security.authc.realms` 
settings in the `elasticsearch.yml` file. However, the native realm is available 
by default when no other realms are configured. Therefore, you don't need to do 
any extra configuration steps in this tutorial. You can jump straight to 
creating users!

If you want to learn more about authentication and realms, see 
<<setting-up-authentication>>.

[role="xpack"]
[[get-started-users]]
=== Create users

Let's create two users in the native realm. 

. Log in to {kib} with the `elastic` built-in user. 

. Go to the *Management / Security / Users* page:
+
--
[role="screenshot"]
image::security/images/management-builtin-users.jpg["User management screenshot in Kibana"]

In this example, you can see all of the built-in users. 
--

. Click *Create user* to make a new user. For example, create a user for yourself:
+
--
[role="screenshot"]
image::security/images/create-user.jpg["Creating a user in Kibana"]

You'll notice that when you create a user, you can assign it a role. Don't 
choose a role yet--we'll come back to that in subsequent steps.
--

. Click *Create user* and create a `logstash_internal` user.
+
--
In {stack-gs}/get-started-elastic-stack.html[Geting started with the {stack}], 
you configured {ls} to listen for {metricbeat} 
input and to send the events to {es}.  You therefore need to create a user 
that {ls} can use to communicate with {es}. For example:

[role="screenshot"]
image::security/images/create-logstash-user.jpg["Creating a {ls} user in {kib}"]
--

[role="xpack"]
[[get-started-roles]]
=== Assign roles

By default, all users can change their own passwords, get information about 
themselves, and run the `authenticate` API. If you want them to do more than 
that, you need to give them one or more _roles_. 

Each role defines a specific set of actions (such as read, create, or delete) 
that can be performed on specific secured resources (such as indices, aliases, 
documents, fields, or clusters). To help you get up and running, there are 
built-in roles. 

Go to the *Management / Security / Roles* page to see them:

[role="screenshot"]
image::security/images/management-roles.jpg["Role management screenshot in Kibana"]

Select a role to see more information about its privileges. For example, if you 
select the `kibana_user` role, you will see that it grants `manage`, `read`, 
`index`, and `delete` privileges on the `.kibana*` indices. To learn more about 
these privileges, see <<privileges-list-indices>>. 

Let's assign the `kibana_user` role to your user. Go back to the 
*Management / Security / Users* page and select your user. Add the `kibana_user` 
role and save the change. For example:

[role="screenshot"]
image::security/images/assign-role.jpg["Assigning a role to a user in Kibana"]

This user now has the minimum privileges required to use {kib}. 

If you completed all of the steps in 
{stack-gs}/get-started-elastic-stack.html[Getting started with the {stack}], you should 
have {metricbeat} data stored in {es}. Let's create two roles that grant 
different levels of access to that data. 

Go to the *Management / Security / Roles* page and click *Create role*. 

Create a `metricbeat_reader` role that has `read` and `view_index_metadata` 
privileges on the `metricbeat-*` indices:

[role="screenshot"]
image::security/images/create-reader-role.jpg["Creating a role in Kibana"]

Create a `metricbeat_writer` role that has `manage_index_templates` and `monitor` 
cluster privileges, as well as `write`, `delete`, and `create_index` privileges
on the `metricbeat-*` indices:

[role="screenshot"]
image::security/images/create-writer-role.jpg["Creating another role in Kibana"]

Now go back to the *Management / Security / Users* page and assign these roles 
to the appropriate users. Assign the `metricbeat_reader` role to your personal 
user.  Assign the `metricbeat_writer` role to the `logstash_internal` user.

The list of users should now contain all of the built-in users as well as the 
two you created. It should also show the appropriate roles for your users:

[role="screenshot"]
image::security/images/management-users.jpg["User management screenshot in Kibana"]

If you want to learn more about authorization and roles, see <<authorization>>.

[role="xpack"]
[[get-started-logstash-user]]
=== Add user information in {ls}

In order for {ls} to send data successfully to {es}, you must configure its 
authentication credentials in the {ls} configuration file.  

. Configure {ls} to use the `logstash_internal` user and the password that you 
created:

** If you don't mind having passwords visible in your configuration file, add 
the following `user` and `password` settings in the `demo-metrics-pipeline.conf` 
file in your {ls} directory:
+
--
[source,ruby]
----
...

output {
  elasticsearch {
    hosts => "localhost:9200"
    manage_template => false
    index => "%{[@metadata][beat]}-%{[@metadata][version]}-%{+YYYY.MM.dd}"
    user => "logstash_internal" <1>
    password => "your_password" <2>
  }
}
----
<1> Specify the `logstash_internal` user that you created earlier in this tutorial. 
<2> Specify the password that you chose for this user ID.
--

** If you prefer not to put your user ID and password in the configuration file, 
store them in a keystore instead. 
+
--
Run the following commands to create the {ls} 
keystore and add the secure settings:

["source","sh",subs="attributes,callouts"]
----------------------------------------------------------------------
set +o history 
export LOGSTASH_KEYSTORE_PASS=mypassword <1>
set -o history
./bin/logstash-keystore create
./bin/logstash-keystore add ES_USER
./bin/logstash-keystore add ES_PWD
----------------------------------------------------------------------
<1> You can optionally protect access to the {ls} keystore by storing a password 
in an environment variable called `LOGSTASH_KEYSTORE_PASS`. For more information, 
see {logstash-ref}/keystore.html#keystore-password[Keystore password]. 

When prompted, specify the `logstash_internal` user and its password for the 
`ES_USER` and `ES_PWD` values. 

NOTE: The {ls} keystore differs from the {kib} keystore. Whereas the {kib} 
keystore enables you to store `kibana.yml` settings by name, the {ls} keystore 
enables you to create arbitrary names that you can reference in the {ls} 
configuration. To learn more, see 
{logstash-ref}/keystore.html[Secrets keystore for secure settings].

You can now use these `ES_USER` and `ES_PWD` keys in your configuration 
file.  For example, add the `user` and `password` settings in the 
`demo-metrics-pipeline.conf` file as follows:

[source,ruby]
----
...

output {
  elasticsearch {
    hosts => "localhost:9200"
    manage_template => false
    index => "%{[@metadata][beat]}-%{[@metadata][version]}-%{+YYYY.MM.dd}"
    user => "${ES_USER}" 
    password => "${ES_PWD}" 
  }
}
----
--

. Start {ls} by using the appropriate method for your environment. 
+
--
For example, to 
run {ls} from a command line, go to the {ls} directory and enter the following 
command:

["source","sh",subs="attributes,callouts"]
----------------------------------------------------------------------
./bin/logstash -f demo-metrics-pipeline.conf
----------------------------------------------------------------------

To start {ls} as a service, see 
{logstash-ref}/running-logstash.html[Running {ls} as a service on Debian or RPM].  
-- 

. If you were connecting directly from {metricbeat} to {es}, you would need 
to configure authentication credentials for the {es} output in the {metricbeat} 
configuration file. In 
{stack-gs}/get-started-elastic-stack.html[Getting started with the {stack}], 
however, you configured 
{metricbeat} to send the data to {ls} for additional parsing, so no extra 
settings are required in {metricbeat}. For more information, see 
{metricbeat-ref}/securing-metricbeat.html[Securing {metricbeat}]. 

. Start {metricbeat} by using the appropriate method for your environment. 
+
--
For example, on macOS, run the following command from the {metricbeat} directory:

["source","sh",subs="attributes,callouts"]
----------------------------------------------------------------------
./metricbeat -e
----------------------------------------------------------------------

For more methods, see {metricbeat-ref}/metricbeat-starting.html[Starting {metricbeat}].
--

Wait a few minutes for new data to be sent from {metricbeat} to {ls} and {es}. 

[role="xpack"]
[[get-started-verify-users]]
=== View system metrics in {kib}

Log in to {kib} with the user ID that has `metricbeat_reader` and `kibana_user` 
roles (for example, `jdoe`). 

These roles enable the user to see the system metrics in {kib} (for example, on 
the *Discover* page or in the 
http://localhost:5601/app/kibana#/dashboard/Metricbeat-system-overview[{metricbeat} system overview dashboard]). 

[float]
[[gs-security-nextsteps]]
=== What's next?

Congratulations! You've successfully set up authentication and authorization by 
using the native realm. You learned how to create user IDs and roles that 
prevent unauthorized access to the {stack}. 

Next, you'll want to try other features that are unlocked by your trial license, 
such as {ml}. See <<ml-getting-started,Getting started with {ml}>>. 

Later, when you're ready to increase the number of nodes in your cluster or set 
up an production environment, you'll want to encrypt communications across the 
{stack}. To learn how, read <<encrypting-communications>>. 

For more detailed information about securing the {stack}, see:

* {ref}/configuring-security.html[Configuring security in {es}]. Encrypt 
inter-node communications, set passwords for the built-in users, and manage your 
users and roles.  

* {kibana-ref}/using-kibana-with-security.html[Configuring security in {kib}]. 
Set the authentication credentials in {kib} and encrypt communications between 
the browser and the {kib} server.

* {logstash-ref}/ls-security.html[Configuring security in Logstash]. Set the 
authentication credentials for Logstash and encrypt communications between 
Logstash and {es}. 

* <<beats,Configuring security in the Beats>>. Configure authentication 
credentials and encrypt connections to {es}. 

* <<java-clients,Configuring the Java transport client to use encrypted communications>>.

* {hadoop-ref}/security.html[Configuring {es} for Apache Hadoop to use secured transport]. 

[tls-getting-started]
=== Secure communications in the cluster

{security} enables you to encrypt traffic to, from, and within your cluster. 
The {stack} uses Transport Layer Security (TLS/SSL) to:
. Ensure only authorized nodes can join an {es} cluster.
. Secure encrypted communications between:
** {es} nodes
** Clients and the {es} cluster
** User web browsers and {kib}
** Beats and {ls}

[float]
[[tls-getting-started-prerequisites]]
=== Before you begin

. Install and configure {es}, {kib}, {ls}, and {metricbeat} as described in 
<<get-started-elastic-stack>>.  

. Stop {ls}. The method for starting and stopping {ls} varies depending on whether 
you are running it from the command line or running it as a service. For example, 
if you are running {ls} from the command line, you can stop it by entering 
`Ctrl-C`. See {logstash-ref}/shutdown.html[Shutting down {ls}]. 

. Stop {metricbeat}. For example, enter `Ctrl-C` on the command line where it is 
running.

. Launch the {kib} web interface by pointing your browser to port 5601. For 
example, http://127.0.0.1:5601[http://127.0.0.1:5601].

. <<gs-security-license,Install a trial license>>.

. <<gs-security-enabled,Enable security in {es}>>.

. <<gs-built-in-users,Create passwords for built-in users>>.
+
--
NOTE: This section of the tutorial does not use the built-in `kibana`, 
`logstash_system`, and `beats_system` users. To learn more about those users, 
see <<built-in-users>>.

--

. <<gs-kibana-security,Add the built-in user to {kib}>>.

[float]
[[gs-tls-certificates]]
=== Generate certificates

In a secured cluster, {es} nodes, {kib} instances, {ls} hosts, and Beats use 
certificates to identify themselves when accepting incoming connections and 
connecting to other services. 

The cluster must validate the authenticity of these certificates. The 
recommended approach is to trust a specific certificate authority (CA). Thus 
when nodes are added to your cluster they just need to use a certificate signed 
by the same CA and the node is automatically allowed to join the cluster. 

. Pick a verification mode for the certificates. By default, {es} verifies that 
the certificate is signed by a trusted CA and also verifies that the server's 
hostname or IP address matches the names specified within the certificate. If 
you don't want the hostname verification to occur, add the following setting to 
the `ES_PATH_CONF/elasticsearch.yml` file:
+
--
[source,yaml]
----
xpack.ssl.verification_mode: certificate
----

In this tutorial, we will use the default value of `full`.

For more information about this setting, see 
{ref}/security-settings.html[Security settings in {es}]. 
--

. Generate a certificate authority. For example, use the `elasticsearch-certutil` 
tool by running the following command from the {es} directory:
+
--
["source","sh",subs="attributes,callouts"]
----------------------------------------------------------------------
./bin/elasticsearch-certutil ca
----------------------------------------------------------------------
// NOTCONSOLE

By default, the command outputs a single file with the name 
`elastic-stack-ca.p12`. This file is a PKCS#12 keystore that contains the public
certificate for your CA and the private key that is used to sign the node 
certificates.

The `elasticsearch-certutil` command also prompts you for a password to protect 
the file and key. If you plan to add more nodes to your cluster in the future, 
retain a copy of the file and remember its password.

Alternatively, you can use a commercial or organization-specific CA, though that 
scenario is not covered in this tutorial. See the `csr` option in the {ref}/certutil.html[elasticsearch-certutil] command. 
--

. Generate a certificate and private key for each node in your cluster. 
+
--
If you had a multi-node cluster and you chose to do hostname verification, you 
would need to create a separate certificate for each node. You can generate 
certificates and keys for multiple nodes at once by specifying the `--multiple` 
parameter, which prompts you for details about each node or instance.

In this tutorial, however, we are only using a single node cluster, 
// TBD: Is this step even need in a single-node cluster?
so run the following command once from your {es} directory:

["source","sh",subs="attributes,callouts"]
----------------------------------------------------------------------
bin/elasticsearch-certutil cert --ca elastic-stack-ca.p12 \
--dns <domain_name> <1> --ip <ip_addresses> <2> --name <file_name> <3>
----------------------------------------------------------------------
// NOTCONSOLE
<1> A comma-separated list of DNS names for your {es} node.
<2> A comma-separated list of IP addresses for your {es} node.
<3> A unique name for the certificate.

If you chose not to do hostname verification, you can omit the `--dns`, `--ip`, 
and `--name` parameters. In that case, the certificate does not have hostname 
information in it and you can use the same certificate for every node in your 
cluster.

This command prompts you for a password. You can enter a password for your 
certificate and key, or you can leave the password blank by pressing *Enter*.

The output from this command is a single PKCS#12 keystore that includes a node 
certificate, node key, and CA certificate. You can alternatively generate 
Privacy Enhanced Mail (PEM) formatted certificates and keys, though that option 
is not covered in this tutorial. 
--

. Copy the node certificate to the {es} configuration directory. For example, 
copy the `.p12` file that you created in the previous step into a `certs` folder 
in the {es} `config` directory. If you had a multi-node cluster, you would 
create the `certs` folder on each node and copy the appropriate node certificate 
to each node. 

. Create a certificate for use by {kib}. 
+
--
{kib} doesn't currently support PKCS#12 keystores, so we must create a PEM 
formatted certificate for it. For example:

["source","sh",subs="attributes,callouts"]
----------------------------------------------------------------------
openssl pkcs12 -in elastic-certificates.p12 -cacerts -nokeys -out elastic-ca.pem
----------------------------------------------------------------------

... where `elastic-certificates.p12` is the PKCS#12 keystore that you generated 
for the node where {kib} is running.
--

. Copy the `elastic-ca.pem` file to your {kib} directory.

For more information, see 
{ref}/configuring-tls.html#node-certificates[Generating Node Certificates].

In subsequent steps, we will copy these certificates to the appropriate location 
for each product in the {stack} and specify the location of the certificates and 
private keys in the {es}, {kib}, {ls}, and Beats configuration files. The 
passphrases for the private keys are stored in each product’s secure keystore.

[float]
[[gs-tls-elasticsearch]]
=== Encrypt internode communications  

In this tutorial, we are only using a single node cluster, but if you plan to 
add more nodes, you must ensure that communication between those nodes will be 
encrypted. 

Perform the following steps on each node in the cluster:

. Stop {es}. For example, if you installed {es} from an archive distribution, 
enter `Ctrl-C` on the command line. See 
{ref}/stopping-elasticsearch.html[Stopping {es}].

. Enable TLS for transport communications between nodes within the cluster. For 
example, add the following setting in the `ES_PATH_CONF/elasticsearch.yml` file:
+
--
[source,yaml]
----
xpack.security.transport.ssl.enabled: true  
----
--

. Configure each node in the cluster to identify itself using its signed
certificate. For example, add the following settings in the 
`ES_PATH_CONF/elasticsearch.yml` file, using the file and path names that you 
created in previous steps:
+
--
[source,yaml]
----
xpack.security.transport.ssl.keystore.path: certs/elastic-certificates.p12 
xpack.security.transport.ssl.truststore.path: certs/elastic-certificates.p12 
----

If you had a multi-node cluster and you created a separate certificate for each 
node, you must customize this path on each node. If the filename matches the 
node name, you can simply use the value `certs/${node.name}.p12`.

NOTE: The PKCS#12 keystore that is output by the `elasticsearch-certutil` 
command includes a CA certificate as a trusted certificate entry, thus the 
keystore can also be used as a truststore. If you use other tools to manage and 
generate your certificates, you might have different values for these settings.

--

. If you specified a password for the certificates, add that password to the 
{es} keystore.  For example: 
+
--
["source","sh",subs="attributes,callouts"]
----------------------------------------------------------------------
./bin/elasticsearch-keystore add xpack.security.transport.ssl.keystore.secure_password
./bin/elasticsearch-keystore add xpack.security.transport.ssl.truststore.secure_password
----------------------------------------------------------------------
--

. Restart {es}. For example, if you installed {es} with a `.tar.gz` package, run 
the following command from the {es} directory:
+
--
["source","sh",subs="attributes,callouts"]
----------------------------------------------------------------------
./bin/elasticsearch
----------------------------------------------------------------------

See {ref}/starting-elasticsearch.html[Starting {es}].  
--

When TLS is enabled on an {es} cluster, {kib}, {ls}, and Beats must communicate 
with the cluster over HTTPS and provide authentication credentials. 

[float]
[[gs-tls-http-elasticsearch]]
=== Encrypt HTTP client communications 

You can also optionally enable TLS on the HTTP layer to ensure that 
communication between the HTTP clients and the cluster is encrypted. See 
{ref}/configuring-tls.html#tls-http[Encrypting HTTP client communications].

NOTE: Enabling TLS on the HTTP layer is strongly recommended but is not required. 
If you enable TLS on the HTTP layer in {es}, you might need to make 
configuration changes in other parts of the {stack} and in any {es} clients that 
you use.

Perform the following steps on each node in the cluster:

. Stop {es}. For example, if you installed {es} from an archive distribution, 
enter `Ctrl-C` on the command line. See {ref}/stopping-elasticsearch.html[Stopping {es}].

. Enable TLS for HTTP communications. For example, add the following setting in the `ES_PATH_CONF/elasticsearch.yml` file:
+
--
[source,yaml]
----
xpack.security.http.ssl.enabled: true  
----
--
 
. Configure each node in the cluster to identify itself using its signed
certificate. For example, add the following settings in the 
`ES_PATH_CONF/elasticsearch.yml` file, using the file and path names that you 
created in previous steps:
+
--
[source,yaml]
----
xpack.security.http.ssl.keystore.path: certs/elastic-certificates.p12 
xpack.security.http.ssl.truststore.path: certs/elastic-certificates.p12 
----

If you had a multi-node cluster and you created a separate certificate for each 
node, you must customize this path on each node. If the filename matches the 
node name, you can simply use the value `certs/${node.name}.p12`.
--

. If you specified a password for the certificates, add that password to the 
{es} keystore.  For example: 
+
--
["source","sh",subs="attributes,callouts"]
----------------------------------------------------------------------
./bin/elasticsearch-keystore add xpack.security.http.ssl.keystore.secure_password
./bin/elasticsearch-keystore add xpack.security.http.ssl.truststore.secure_password
----------------------------------------------------------------------
--

. Restart {es}. For example, if you installed {es} with a `.tar.gz` package, run 
the following command from the {es} directory:
+
--
["source","sh",subs="attributes,callouts"]
----------------------------------------------------------------------
./bin/elasticsearch
----------------------------------------------------------------------

See {ref}/starting-elasticsearch.html[Starting {es}].  
--

[float]
[[gs-tls-kibana]]
=== Configure TLS in {kib}

To encrypt communications between {kib} and {es}, configure {kib} to access {es} 
by using HTTPS:

. Specify the HTTPS protocol in the `elasticsearch.url` setting in the 
`kibana.yml` file in your {kib} directory:
+
--
[source,yaml]
----
elasticsearch.url: "https://<your_elasticsearch_host>.com:9200"
----
--

. Specify the location of the PEM formatted certificate that you created for 
{kib}. Add the following setting in the `kibana.yml` file in your {kib} directory:
+
--
[source,yaml]
----
elasticsearch.ssl.certificateAuthorities: ["/path/to/your/elastic-ca.pem"]
----
--

. Restart {kib}. For example, if you installed 
{kib} with a `.tar.gz` package, run the following command from the {kib} 
directory:
+
--
["source","sh",subs="attributes,callouts"]
----------------------------------------------------------------------
./bin/kibana
----------------------------------------------------------------------

See {kibana-ref}/start-stop.html[Starting and stopping {kib}]. 
--

. Launch the {kib} web interface by pointing your browser to port 5601. For 
example, https://127.0.0.1:5601[https://127.0.0.1:5601].

////
. Optional: Configure {kib} to encrypt communications between the browser the 
{kib} server. See
{kibana-ref}/using-kibana-with-security.html[Configuring Security in {kib}].
////

[float]
[[gs-tls-logstash]]
=== Configure TLS in {ls}

Configure Logstash to use TLS encryption. See
{logstash-ref}/ls-security.html[Configuring Security in Logstash].

[float]
[[gs-tls-beats]]
=== Configure TLS in {metricbeat}

Configure Beats to use encrypted connections. See <<beats>>.

[float]
[[gs-tls-nextsteps]]
=== What's next?

Congratulations! You've successfully encrypted communications in the {stack}.  

Next, you'll want to try other features that are unlocked by your trial license, 
such as {ml}. See <<ml-getting-started,Getting started with {ml}>>. 

//. Configure {monitoring} to use encrypted connections. See <<secure-monitoring>>.
//. Configure the Java transport client to use encrypted communications. See <<java-clients>>.
//. Configure {es} for Apache Hadoop to use secured transport. See {hadoop-ref}/security.html[{es} for Apache Hadoop Security].

For more detailed information about securing the {stack}, see:

* {ref}/configuring-security.html[Configuring security in {es}]. Encrypt 
inter-node communications, set passwords for the built-in users, and manage your 
users and roles.  

* {kibana-ref}/using-kibana-with-security.html[Configuring security in {kib}]. 
Set the authentication credentials in {kib} and encrypt communications between 
the browser and the {kib} server.

* {logstash-ref}/ls-security.html[Configuring security in Logstash]. Set the 
authentication credentials for Logstash and encrypt communications between 
Logstash and {es}. 

* <<beats,Configuring security in the Beats>>. Configure authentication 
credentials and encrypt connections to {es}. 

* <<java-clients,Configuring the Java transport client to use encrypted communications>>.

* {hadoop-ref}/security.html[Configuring {es} for Apache Hadoop to use secured transport]. 