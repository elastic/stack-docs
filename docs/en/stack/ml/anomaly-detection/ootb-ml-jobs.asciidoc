[role="xpack"]
[[ootb-ml-jobs]]
== Supplied {anomaly-detect} configurations

{anomaly-jobs-cap} contain the configuration information and metadata necessary 
to perform an analytics task. {kib} can recognize certain types of data and 
provide specialized wizards for that context. This page lists the categories of 
the {anomaly-jobs} that are ready to use via {kib}.

* <<ootb-ml-jobs-apache>>
* <<ootb-ml-jobs-apm>>
* <<ootb-ml-jobs-auditbeat>>
* <<ootb-ml-jobs-logs-ui>>
* <<ootb-ml-jobs-metricbeat>>
* <<ootb-ml-jobs-nginx>>
* <<ootb-ml-jobs-siem>>
* <<ootb-ml-jobs-uptime>>



[[ootb-ml-jobs-apache]]
=== Apache {anomaly-detect} configurations
++++
<titleabbrev>Apache</titleabbrev>
++++
// tag::apache-jobs[]
These {anomaly-job} wizards appear in {kib} if you use 
{filebeat-ref}/index.html[{filebeat}] to ship access logs from your 
https://httpd.apache.org/[Apache] HTTP servers to {es} and store it using fields 
and data types from the Elastic Common Schema (ECS). For more details, see the
{dfeed} and job definitions in
https://github.com/elastic/kibana/tree/{branch}/x-pack/plugins/ml/server/models/data_recognizer/modules/apache_ecs/ml[GitHub].

low_request_rate_ecs::

* For HTTP web access logs where `event.dataset` is `apache.access`.
* Models the event rate of HTTP requests. 
* Detects unusually low counts of HTTP requests compared to the previous event 
  rate (using the <<ml-count,`low_count` function>>).

source_ip_request_rate_ecs::

* For HTTP web access logs where `event.dataset` is `apache.access`.
* Models the event rate of HTTP requests by source IP.
* Detects source IPs with unusually high request rates in the HTTP access log 
  compared to the previous rate (using the <<ml-count,`high_count` function>>).

source_ip_url_count_ecs::

* For HTTP web access logs where `event.dataset` is `apache.access`.
* Models the event rate of HTTP requests by source IP.
* Detects source IPs with unusually high distinct count of URLs in the HTTP 
access log (using the <<ml-distinct-count,`high_distinct_count` function>>).

status_code_rate_ecs::

* For HTTP web access logs where `event.dataset` is `apache.access`.
* Models the occurrences of HTTP response status codes (`partition_field_name` 
  is `http.response.status_code`).
* Detects unusual status code rates in the HTTP access log compared to previous 
  rates (using the <<ml-count,`count` function>>).

visitor_rate_ecs::

* For HTTP web access logs where `event.dataset` is `apache.access`.
* Models visitor rates.
* Detects unusual visitor rates in the HTTP access log ompared to previous 
  rates (using the <<ml-nonzero-count,`non_zero_count` function>>).

[[ootb-ml-jobs-apm]]
=== APM {anomaly-detect} configurations
++++
<titleabbrev>APM</titleabbrev>
++++

These {anomaly-job} wizards appear in {kib} if you have data from APM Agents or
an APM Server stored in {es}. For more details, see the {dfeed} and job
definitions in the `apm_*` folders in
https://github.com/elastic/kibana/tree/{branch}/x-pack/plugins/ml/server/models/data_recognizer/modules[GitHub].

// tag::apm-jobs[]
abnormal_span_durations_jsbase::
abnormal_span_durations_nodejs::

* For data from {apm-rum-agents} or {apm-node-agents} (where `agent.name` is `js-base` or `nodejs`).
* Models the duration of spans (`partition_field_name` is `span.type`).
* Detects for spans that are taking longer than usual to process (using the 
  <<ml-metric-mean,`high_mean` function>>).

abnormal_trace_durations_nodejs::

* For data from {apm-node-agents} (where `agent.name` is `nodejs`).
* Models the duration of trace transactions.
* Detects trace transactions that are processing slower than usual (using the 
  <<ml-metric-mean,`high_mean` function>>).

anomalous_error_rate_for_user_agents_jsbase::

* For data from {apm-rum-agents} (where `agent.name` is `js-base`).
* Models the error rate of user agents (`partition_field_name` is 
  `user_agent.name`).
* Detects user agents that are encountering errors at an above normal rate 
  (using the <<ml-nonzero-count,`high_non_zero_count` function>>).
  
This job can help detect browser compatibility issues.

decreased_throughput_jsbase::
decreased_throughput_nodejs::

* For data from {apm-rum-agents} or {apm-node-agents} (where `agent.name` is `js-base` or `nodejs`).
* Models the transaction rate of the application.
* Detects periods during which the application is processing fewer requests 
than normal (using the <<ml-count,`low_count` function>>).

high_count_by_user_agent_jsbase::

* For data from {apm-rum-agents} (where `agent.name` is `js-base`).
* Models the request rate of user agents (`partition_field_name` is 
  `user_agent.name`).
* Detects user agents that are making requests at a suspiciously high rate 
  (using the <<ml-nonzero-count,`high_non_zero_count` function>>).

This job is useful in identifying bots.

high_mean_response_time::

* For transaction data where `processor.event` is `transaction` and 
`transaction.type` is `request`.
* Models response time duration of transactions.
* Detects anomalies in high mean of transaction duration (using the 
  <<ml-metric-mean,`high_mean` function>>).

// end::apm-jobs[]


[[ootb-ml-jobs-auditbeat]]
=== {auditbeat} {anomaly-detect} configurations
++++
<titleabbrev>{auditbeat}</titleabbrev>
++++

// tag::auditbeat-jobs[]
These {anomaly-job} wizards appear in {kib} if you use 
{auditbeat-ref}/index.html[{auditbeat}] to audit process activity on your 
systems. For more details, see the {dfeed} and job definitions in the
`auditbeat_*` folders in
https://github.com/elastic/kibana/tree/{branch}/x-pack/plugins/ml/server/models/data_recognizer/modules[GitHub].

docker_high_count_process_events_ecs::

* For Auditbeat data where `event.module` is `auditd` and `container.runtime` is 
`docker`.
* Models process execution rates (`partition_field_name` is `container.name`).
* Detects unusual increases in process execution rates in Docker containers 
  (using the <<ml-count,`high_count` function>>).

docker_rare_process_activity_ecs::

* For Auditbeat data where `event.module` is `auditd` and `container.runtime` is 
`docker`.
* Models occurrences of process execution (`partition_field_name` is 
  `container.name`).
* Detects rare process executions in Docker containers (using the 
  <<ml-rare,`rare` function>>).

hosts_high_count_process_events_ecs::

* For Auditbeat data where `event.module` is `auditd`.
* Models process execution rates (`partition_field_name` is `host.name`).
* Detects unusual increases in process execution rates (using the 
  <<ml-nonzero-count,`high_non_zero_count` function>>).

hosts_rare_process_activity_ecs::

* For Auditbeat data where `event.module` is `auditd`.
* Models process execution rates (`partition_field_name` is `host.name`).
* Detects rare process executions on hosts (using the 
  <<ml-rare,`rare` function>>).

// end::auditbeat-jobs[]


[[ootb-ml-jobs-logs-ui]]
=== Logs {anomaly-detect} configurations
++++
<titleabbrev>Logs</titleabbrev>
++++

// tag::logs-jobs[]
These {anomaly-jobs} appear by default in the
{kibana-ref}/xpack-logs.html[Logs app] in {kib}. For more details, see the
{dfeed} and job definitions in the `logs_ui_*` folders in
https://github.com/elastic/kibana/tree/{branch}/x-pack/plugins/ml/server/models/data_recognizer/modules[GitHub].

log_entry_categories_count::

* For log entry categories via the Logs UI.
* Models the occurrences of log events (`partition_field_name` is 
  `event.dataset`).
* Detects anomalies in count of log entries by category (using the 
  <<ml-count,`count` function>>).

log_entry_rate::

* For log entries via the Logs UI.
* Models ingestion rates (`partition_field_name` is `event.dataset`). 
* Detects anomalies in the log entry ingestion rate (using the 
  <<ml-count,`low_count` function>>).
  
// end::logs-jobs[]


[[ootb-ml-jobs-metricbeat]]
=== {metricbeat} {anomaly-detect} configurations
++++
<titleabbrev>{metricbeat}</titleabbrev>
++++

// tag::metricbeat-jobs[]
These {anomaly-job} wizards appear in {kib} if you use the 
{metricbeat-ref}/metricbeat-module-system.html[{metricbeat} system module] to 
monitor your servers. For more details, see the
{dfeed} and job definitions in https://github.com/elastic/kibana/tree/{branch}/x-pack/plugins/ml/server/models/data_recognizer/modules/metricbeat_system_ecs/ml[GitHub].

high_mean_cpu_iowait_ecs::

* For {metricbeat} data where `event.dataset` is `system.cpu` and 
  `system.filesystem`.
* Models CPU time spent in iowait (`partition_field_name` is `host.name`).
* Detects unusual increases in cpu time spent in iowait (using the 
  <<ml-metric-mean,`high_mean` function>>).

max_disk_utilization_ecs::

* For {metricbeat} data where `event.dataset` is `system.cpu` and 
  `system.filesystem`.
* Models disc utilization (`partition_field_name` is `host.name`).
* Detects unusual increases in disk utilization (using the 
  <<ml-metric-max,`max` function>>).

metricbeat_outages_ecs::

* For {metricbeat} data where `event.dataset` is `system.cpu` and 
  `system.filesystem`.
* Models counts of {metricbeat} documents 
  (`partition_field_name` is `event.dataset`).
* Detects unusual decreases in {metricbeat} documents (using the 
  <<ml-count,`low_count` function>>).

// end::metricbeat-jobs[]


[[ootb-ml-jobs-nginx]]
=== Nginx {anomaly-detect} configurations
++++
<titleabbrev>Nginx</titleabbrev>
++++

// tag::nginx-jobs[]
These {anomaly-job} wizards appear in {kib} if you use {filebeat} to ship access 
logs from your http://nginx.org/[Nginx] HTTP servers to {es} and store it using 
fields and datatypes from the Elastic Common Schema (ECS). For more details, see
the {dfeed} and job definitions in
https://github.com/elastic/kibana/tree/{branch}/x-pack/plugins/ml/server/models/data_recognizer/modules/nginx_ecs/ml[GitHub].

low_request_rate_ecs::

* For HTTP web access logs where `event.dataset` is `nginx.access`.
* Models the event rate of http requests. 
* Detects unusually low counts of HTTP requests compared to the previous event 
  rate (using the <<ml-count,`low_count` function>>).

source_ip_request_rate_ecs::

* For HTTP web access logs where `event.dataset` is `nginx.access`.
* Models the event rate of HTTP requests by source IP.
* Detects source IPs with unusually high request rates in the HTTP access log 
  compared to the previous rate (using the <<ml-count,`high_count` function>>). 

source_ip_url_count_ecs::

* For HTTP web access logs where `event.dataset` is `nginx.access`.
* Models the event rate of HTTP requests by source IP.
* Detects source IPs with unusually high distinct count of URLs in the HTTP 
  access log (using the <<ml-distinct-count,`high_distinct_count` function>>).

status_code_rate_ecs::

* For HTTP web access logs where `event.dataset` is `nginx.access`.
* Models the occurrences of HTTP response status codes (`partition_field_name` 
  is `http.response.status_code`).
* Detects unusual status code rates in the HTTP access log compared to previous 
  rates (using the <<ml-count,`count` function>>).

visitor_rate_ecs::

* For HTTP web access logs where `event.dataset` is `nginx.access`.
* Models visitor rates.
* Detects unusual visitor rates in the HTTP access log ompared to previous 
  rates (using the <<ml-nonzero-count,`non_zero_count` function>>).

// end::nginx-jobs[]


[[ootb-ml-jobs-siem]]
=== SIEM {anomaly-detect} configurations
++++
<titleabbrev>SIEM</titleabbrev>
++++

These {anomaly-jobs} appear by default in the Anomaly Detection interface of
the {siem-guide}/machine-learning.html[SIEM app] in {kib}. They help you 
automatically detect file system and network anomalies on your hosts. However,
if you don't use Beats, you need to map your data to the ECS fields that are 
listed for every job.

// tag::siem-jobs[]
For more details, see the
{dfeed} and job definitions in the `siem_*` folders in
https://github.com/elastic/kibana/tree/{branch}/x-pack/plugins/ml/server/models/data_recognizer/modules[GitHub].

linux_anomalous_network_activity_ecs::
+
windows_anomalous_network_activity_ecs::

Identifies OS processes that do not usually use the network but have
unexpected network activity, which can indicate command-and-control, lateral
movement, persistence, or data exfiltration activity.
+
A process with unusual network activity can denote process exploitation or
injection, where the process is used to run persistence mechanisms that allow a
malicious actor remote access or control of the host, data exfiltration, and
execution of unauthorized network applications.

Job details:::

* Analyzes network activity logs where `agent.type` is `auditbeat` (Linux) or `winlogbeat` (Windows).
* Models the occurrences of processes that cause network activity.
* Detects network activity caused by processes that occur rarely compared to 
  other processes (using the {ml-docs}/ml-rare-functions.html#ml-rare[`rare` function]).

Required {beats}:::

* {auditbeat} (Linux)
* {winlogbeat} (Windows)

Required ECS fields when not using {beats}:::

* `destination.ip`
* `host.name`
* `process.name`
* `user.name`
* `event.action`
* `agent.type`

linux_anomalous_network_port_activity_ecs::

Identifies unusual destination port activity that can indicate
command-and-control, persistence mechanism, or data exfiltration activity.
+
Rarely used destination port activity is generally unusual in Linux fleets, and 
can indicate unauthorized access or threat actor activity.

Job details:::

* Analyzes network activity logs where `agent.type` is `auditbeat`.
* Models destination port activity.
* Detects destination port activity that occurs rarely compared to other port 
  activities (using the {ml-docs}/ml-rare-functions.html#ml-rare[`rare` function]).

+
Required {beats}:::

* {auditbeat} (Linux)

+
NOTE: This job is available only when you use {auditbeat} to ship data.

linux_anomalous_network_service::

Searches for unusual listening ports that can indicate execution of
unauthorized services, backdoors, or persistence mechanisms.

Job details:::

* Analyzes network activity logs where `agent.type` is `auditbeat`.
* Models listening port activity.
* Detects listening port activity that occurs rarely compared to 
  other port activities (using the {ml-docs}/ml-rare-functions.html#ml-rare[`rare` function]).

Required {beats}:::

* {auditbeat} (Linux)

+
NOTE: This job is available only when you use {auditbeat} to ship data.

linux_anomalous_network_url_activity_ecs::

Searches for unusual web URL requests from hosts, which can indicate malware
delivery and execution.
+
Wget and cURL are commonly used by Linux programs to download code and data. 
Most of the time, their usage is entirely normal. Generally, because they use a 
list of URLs, they repeatedly download from the same locations. However, Wget 
and cURL are sometimes used to deliver Linux exploit payloads, and threat 
actors use these tools to download additional software and code. For these 
reasons, unusual URLs can indicate unauthorized downloads or threat activity.

Job details:::

* Analyzes network activity logs where `agent.type` is `auditbeat`.
* Models the occurrences of URL requests.
* Detects a web URL request that is rare compared to other web URL 
  requests (using the {ml-docs}/ml-rare-functions.html#ml-rare[`rare` function]).

Required {beats}:::

* {auditbeat} (Linux)

Required ECS fields when not using {beats}:::

* `destination.ip`
* `destination.port`
* `host.name`
* `process.name`
* `process.title`
* `agent.type`

linux_anomalous_process_all_hosts_ecs::
+
windows_anomalous_process_all_hosts_ecs::

Searches for rare processes running on multiple hosts in an entire fleet or
network.
+
This reduces the detection of false positives since automated maintenance
processes usually only run occasionally on a single machine but are common to
all or many hosts in a fleet.

Job details:::

* Analyzes host activity logs where `agent.type` is `auditbeat` (Linux) or `winlogbeat` (Windows).
* Models the occurrences of processes on all hosts.
* Detects processes that occur rarely compared to other processes on all 
  hosts (using the {ml-docs}/ml-rare-functions.html#ml-rare[`rare` function]).

Required {beats}:::

* {auditbeat} (Linux)
* {winlogbeat} (Windows)

Required ECS fields when not using {beats}:::

* `host.name`
* `process.name`
* `user.name`
* `process.executable`
* `event.action`
* `agent.type`

linux_anomalous_user_name_ecs::
+
windows_anomalous_user_name_ecs::

Searches for activity from users who are not normally active, which can
indicate unauthorized changes, activity by unauthorized users, lateral
movement, and compromised credentials.
+
In organizations, new usernames are not often created apart from specific types 
of system activities, such as creating new accounts for new employees. These 
user accounts quickly become active and routine.
+
Events from rarely used usernames can point to suspicious activity. 
Additionally, automated Linux fleets tend to see activity from rarely used 
usernames only when personnel log in to make authorized or unauthorized 
changes, or threat actors have acquired credentials and log in for malicious 
purposes. Unusual usernames can also indicate pivoting, where compromised 
credentials are used to try and move laterally from one host to another.

Job details:::

* Analyzes host activity logs where `agent.type` is `auditbeat` (Linux) or
`winlogbeat` (Windows).
* Models user activity.
* Detects users that are rarely or unusually active compared to other users 
  (using the {ml-docs}/ml-rare-functions.html#ml-rare[`rare` function]).

Required {beats}:::

* {auditbeat} (Linux)
* {winlogbeat} (Windows)

Required ECS fields when not using {beats}:::

* `host.name`
* `process.name`
* `user.name`
* `event.action`
* `agent.type`

packetbeat_dns_tunneling::

Searches for unusually large numbers of DNS queries
for a single top-level DNS domain, which is often used for DNS tunneling.
+
DNS tunneling can be used for command-and-control, persistence, or data
exfiltration activity. For example, `dnscat` tends to generate many DNS
questions for a top-level domain as it uses the DNS protocol to tunnel data.

Job details:::

* Analyzes network activity logs where `agent.type` is `packetbeat`.
* Models occurrences of DNS activity.
* Detects unusual DNS activity (using the 
  {ml-docs}/ml-info-functions.html#ml-info-content[`high_info_content` function]).

Required {beats}:::

* {packetbeat} (Windows and Linux)

Required ECS fields when not using {beats}:::

* `destination.ip`
* `dns.question.registered_domain` 
* `host.name`
* `dns.question.name`
* `event.dataset`
* `agent.type`

+
NOTE: This job uses the {packetbeat}
{packetbeat-ref}/exported-fields-dns.html[`dns.question.etld_plus_one`] field, 
which is not defined in ECS. Instead, map your network data to the
{ecs-ref}/ecs-dns.html[`dns.question.registered_domain`] ECS field.

packetbeat_rare_dns_question::

Searches for rare and unusual DNS queries that indicate network activity with
unusual domains is about to occur. This can be due to initial access,
persistence, command-and-control, or exfiltration activity.
+
For example, when a user clicks on a link in a phishing email or opens a 
malicious document, a request may be sent to download and run a payload from an
uncommon domain. When malware is already running, it may send requests to an
uncommon DNS domain the malware uses for command-and-control communication.

Job details:::

* Analyzes network activity logs where `agent.type` is `packetbeat`.
* Models occurrences of DNS activity.
* Detects DNS activity that is rare compared to other DNS activities (using the 
  {ml-docs}/ml-rare-functions.html#ml-rare[`rare` function]).

Required {beats}:::

* {packetbeat} (Windows and Linux)

+
Required ECS fields when not using {beats}:::

* `host.name`
* `dns.question.name`
* `dns.question.type`
* `event.dataset`
* `agent.type`

packetbeat_rare_server_domain::

Searches for rare and unusual DNS queries that indicate network activity with
unusual domains is about to occur. This can be due to initial access,
persistence, command-and-control, or exfiltration activity.
+
For example, when a user clicks on a link in a phishing email or opens a 
malicious document, a request may be sent to download and run a payload from an
uncommon HTTP or TLS server. When malware is already running, it may send
requests to an uncommon DNS domain the malware uses for command-and-control
communication.

Job details:::

* Analyzes network activity logs where `agent.type` is `packetbeat`.
* Models HTTP or TLS domain activity.
* Detects HTTP or TLS domain activity that is rare compared to other 
  activities (using the {ml-docs}/ml-rare-functions.html#ml-rare[`rare` function]).

Required {beats}:::

* {packetbeat} (Windows and Linux)

Required ECS fields when not using {beats}:::

* `destination.ip`
* `source.ip`
* `host.name`
* `server.domain`
* `agent.type`

packetbeat_rare_urls::

Searches for rare and unusual URLs that indicate unusual 
web browsing activity. This can be due to initial access, persistence,
command-and-control, or exfiltration activity.
+
For example, in a strategic web compromise or watering hole attack, when a
trusted website is compromised to target a particular sector or organization,
targeted users may receive emails with uncommon URLs for trusted websites. These
URLs can be used to download and run a payload. When malware is already running,
it may send requests to uncommon URLs on trusted websites the malware uses for
command-and-control communication. When rare URLs are observed being requested
for a local web server by a remote source, these can be due to web scanning,
enumeration or attack traffic, or they can be due to bots and web scrapers which
are part of common Internet background traffic.

Job details:::

* Analyzes network activity logs where `agent.type` is `packetbeat`.
* Models occurrences of web browsing URL activity.
* Detects URL activity that rarely occurs compared to other URL activities 
  (using the {ml-docs}/ml-rare-functions.html#ml-rare[`rare` function]).

Required {beats}:::

* {packetbeat} (Windows and Linux)

Required ECS fields when not using {beats}:::

* `destination.ip`
* `host.name`
* `url.full`
* `agent.type`

packetbeat_rare_user_agent::

Searches for rare and unusual user agents that indicate web browsing activity
by an unusual process other than a web browser. This can be due to persistence,
command-and-control, or exfiltration activity. Uncommon user agents coming from
remote sources to local destinations are often the result of scanners, bots,
and web scrapers, which are part of common internet background traffic.
+
Much of this is noise, but more targeted attacks on websites using tools like
Burp or SQLmap can sometimes be discovered by spotting uncommon user agents.
Uncommon user agents in traffic from local sources to remote destinations can
be any number of things, including harmless programs like weather monitoring or
stock-trading programs. However, uncommon user agents from local sources can
also be due to malware or scanning activity.

Job details:::

* Analyzes network activity logs where `agent.type` is `packetbeat`.
* Models occurrences of HTTP user agent activity.
* Detects HTTP user agent activity that occurs rarely compared to other HTTP 
  user agent activities (using the {ml-docs}/ml-rare-functions.html#ml-rare[`rare` function]).

Required {beats}:::

* {packetbeat} (Windows and Linux)

Required ECS fields when not using {beats}:::

* `destination.ip`
* `host.name`
* `event.dataset`
* `user_agent.original`
* `agent.type`

rare_process_by_host_linux_ecs::
+
rare_process_by_host_windows_ecs::

Identifies rare processes that do not usually run on individual hosts, which
can indicate execution of unauthorized services, malware, or persistence
mechanisms.
+
Processes are considered rare when they only run occasionally as compared with
other processes running on the host.

Job details:::

* Analyzes host activity logs where `agent.type` is `winlogbeat` (Windows) or `auditbeat` (Linux).
* Models occurrences of process activities on the host. 
* Detects unusually rare processes compared to other processes on the host (using the {ml-docs}/ml-rare-functions.html#ml-rare[`rare` function]).

Required {beats}:::

* {auditbeat} (Linux)
* {winlogbeat} (Windows)

Required ECS fields when not using {beats}:::

* `host.name`
* `process.name`
* `user.name`
* `event.action`
* `agent.type`

suspicious_login_activity_ecs::

Identifies an unusually high number of authentication attempts.

Job details:::

* Analyzes host activity logs where `agent.type` is `auditbeat`.
* Models occurrences of authentication attempts (`partition_field_name` is 
  `host.name`).
* Detects unusually high number of authentication attempts (using the 
  {ml-docs}/ml-count-functions.html#ml-nonzero-count[`high_non_zero_count` function]).

Required {beats}:::

* {auditbeat} (Linux)

Required ECS fields when not using {beats}:::

* `source.ip`
* `host.name`
* `user.name`
* `event.category`
* `agent.type`

windows_anomalous_path_activity_ecs::

Identifies processes started from atypical folders in the file system, which
might indicate malware execution or persistence mechanisms.
+
In corporate Windows environments, software installation is centrally managed
and it is unusual for programs to be executed from user or temporary
directories. Processes executed from these locations can denote that a user
downloaded software directly from the internet or a malicious script/macro
executed malware.

Job details:::

* Analyzes host activity logs where `agent.type` is `winlogbeat`.
* Models occurrences of processes in paths.
* Detects activity in unusual paths (using the {ml-docs}/ml-rare-functions.html#ml-rare[`rare` function]).

Required {beats}:::

* {winlogbeat} (Windows)

Required ECS fields when not using {beats}:::

* `host.name`
* `process.name`
* `user.name`
* `process.working_directory`
* `event.action`
* `agent.type`

windows_anomalous_process_creation::

Identifies unusual parent-child process relationships that can indicate
malware execution or persistence mechanisms.
+
Malicious scripts often call on other applications and processes as part of
their exploit payload. For example, when a malicious Office document runs
scripts as part of an exploit payload, Excel or Word may start a script
interpreter process, which, in turn, runs a script that downloads and executes
malware. Another common scenario is Outlook running an unusual process when
malware is downloaded in an email.
+
Monitoring and identifying anomalous process relationships is an excellent way
of detecting new and emerging malware that is not yet recognized by anti-virus
scanners.

Job details:::

* Analyzes host activity logs where `agent.type` is `winlogbeat`.
* Models occurrences of process creation activities (`partition_field_name` is 
  `process.parent.name`).
* Detects process relationships that are rare compared to other process 
  relationships (using the {ml-docs}/ml-rare-functions.html#ml-rare[`rare` function]).

Required {beats}:::

* {winlogbeat} (Windows)

Required ECS fields when not using {beats}:::

* `host.name`
* `process.name`
* `user.name`
* `process.parent.name`
* `event.action`
* `agent.type`

windows_anomalous_script::

Searches for PowerShell scripts with unusual data characteristics, such as
obfuscation, that may be a characteristic of malicious PowerShell script text
blocks.

Job details:::

* Analyzes host activity logs where `agent.type` is `winlogbeat`.
* Models occurrences of PowerShell script activities.
* Detects unusual PowerShell script execution compared to other PowerShell 
  script activities (using the 
  {ml-docs}/ml-info-functions.html#ml-info-content[`high_info_content` function]).

Required {beats}:::

* {winlogbeat} (Windows)

+
NOTE: This job is available only when you use {winlogbeat} to ship data.

windows_anomalous_service::

Searches for unusual Windows services that can indicate execution of
unauthorized services, malware, or persistence mechanisms.
+
In corporate Windows environments, hosts do not generally run many rare or
unique services. This job helps detect malware and persistence mechanisms that
have been installed and run as a service.

Job details:::

* Analyzes host activity logs where `agent.type` is `winlogbeat`.
* Models occurrences of Windows service activities.
* Detects Windows service activities that occur rarely compared to other Windows service activities (using the {ml-docs}/ml-rare-functions.html#ml-rare[`rare` function]).

Required {beats}:::

* {winlogbeat} (Windows)

+
NOTE: This job is available only when you use {winlogbeat} to ship data.

windows_rare_user_runas_event::

Searches for unusual user context switches using the `runas` command or similar
techniques, which can indicate account takeover or privilege escalation using
compromised accounts. Privilege elevation using tools like `runas` is more
common for domain and network administrators than professionals who are not
members of the technology department.

Job details:::

* Analyzes host activity logs where `agent.type` is `winlogbeat`.
* Models occurrences of user context switches.
* Detects user context switches that occur rarely compared to other user context switches (using the {ml-docs}/ml-rare-functions.html#ml-rare[`rare` function]).

Required {beats}:::

* {winlogbeat} (Windows)

Required ECS fields when not using {beats}:::

* `process.name`
* `host.name`
* `user.name`
* `event.code`
* `agent.type`

windows_rare_user_type10_remote_login::

Searches for unusual remote desktop protocol (RDP) logins, which can indicate
account takeover or credentialed persistence using compromised accounts. RDP
attacks, such as BlueKeep, also tend to use unusual usernames.

Job details:::

* Analyzes host activity logs where `agent.type` is `winlogbeat`.
* Models occurrences of user remote login activities.
* Detects user remote login activities that occur rarely compared to other 
  user remote login activities (using the {ml-docs}/ml-rare-functions.html#ml-rare[`rare` function]).

Required {beats}:::

* {winlogbeat} (Windows)

+
NOTE: This job is available only when you use {winlogbeat} to ship data.

// end::siem-jobs[]

[[ootb-ml-jobs-uptime]]
=== Uptime {anomaly-detect} configurations
++++
<titleabbrev>Uptime</titleabbrev>
++++
// tag::uptime-jobs[]

If you have appropriate {heartbeat} data in {es}, you can enable this
{anomaly-job} in the 
{uptime-guide}/uptime-overview.html[Elastic Uptime] app in {kib}. For more
details, see the {dfeed} and job definitions in 
https://github.com/elastic/kibana/tree/{branch}/x-pack/plugins/ml/server/models/data_recognizer/modules/uptime_heartbeat/ml[GitHub].

high_latency_by_geo::

* Detects unusually high average latency values (using the
<<ml-metric-mean,`high_mean` function>> on the `monitor.duration.us` field).
* Models the occurrences across geographical locations (`partition_field_name` 
  is `observer.geo.name`).

// end::uptime-jobs[]