// for testing:
:version: 8.11.1


[[installing-stack-demo-self]]
=== Tutorial: Installing a self-managed {stack}

This tutorial demonstrates how to install and configure the {stack} in a secure, self-managed environment. Following these steps, you'll set up a three node {es} cluster, with {kib}, {fleet-server}, and {agent}, each on separate hosts. The {agent} will be configured with the System integration, enabling it to gather local system logs and metrics and deliver them into the {es} cluster. Finally, you'll view the system data in {kib}.

These examples use hosts running Red Hat Enterprise Linux 8. The steps for other operating systems are similar, and can be found in the documentation linked from each section.

It should take an hour or so to complete these steps.

. <<install-stack-self-elasticsearch-first>>
. <<install-stack-self-elasticsearch-config>>
. <<install-stack-self-elasticsearch-second>>
. <<install-stack-self-elasticsearch-third>>

[discrete]
[[install-stack-self-prereq]]
== Prerequisites

To get started, you'll need the following:

* A set of virtual or physical hosts on which to install each stack component. 
* On each host, a super user account with `sudo` privileges.

[discrete]
[[install-stack-self-elasticsearch-first]]
== Step 1: Set up the first {es} node

To begin, we'll use RPM to install {es} on the first host. This initial {es} instance will serve as the master node.

. Create a working directory for the installation package:
+
["source","shell"]
----
mkdir elastic-install-files
----

. Change into the new directory:
+
["source","shell"]
----
cd elastic-install-files
----

. Download the {es} RPM and checksum file from the Elastic website. You can find details about these steps in the section {ref}/rpm.html#install-rpm[Download and install the RPM manually].
+
["source","sh",subs="attributes"]
----
wget https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-{version}-x86_64.rpm
wget https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-{version}-x86_64.rpm.sha512
----

. Confirm the validity of the downloaded package by checking the SHA of the downloaded RPM against the published checksum:
+
["source","sh",subs="attributes"]
----
shasum -a 512 -c elasticsearch-{version}-x86_64.rpm.sha512
----
+	
The command should return: `elasticsearch-{version}-x86_64.rpm: OK`.

. Run the {es} install command:
+
["source","sh",subs="attributes"]
----
sudo rpm --install elasticsearch-{version}-x86_64.rpm
----
+
The {es} install process enables certain security features by default, including the following:

* Authentication and authorization are enabled, including a built-in `elastic` superuser account.
* Certificates and keys for TLS are generated for the transport and HTTP layer, and TLS is enabled and configured with these keys and certificates.

. Copy the terminal output from the install command to a local file. In particular, you'll need the password for the built-in `elastic` superuser account. The output also contains the commands to enable {es} to run as a service, which we'll use in the next step.

. Run the following two commands to enable {es} to run as a service using `systemd`. This enables {es} to start automatically when the host system reboots. You can find details about this and the following steps in {ref}/starting-elasticsearch.html#start-es-deb-systemd[Running {es} with `systemd`].
+
["source","sh",subs="attributes"]
----
sudo systemctl daemon-reload
sudo systemctl enable elasticsearch.service
----

. Start the {es} service:
+
["source","sh",subs="attributes"]
----
sudo systemctl start elasticsearch.service
----

. Make sure that {es} is running properly.
+
["source","sh",subs="attributes"]
----
sudo curl --cacert /etc/elasticsearch/certs/http_ca.crt -u elastic:$ELASTIC_PASSWORD https://localhost:9200
----
+
In the command, replace `$ELASTIC_PASSWORD` with the `elastic` superuser password that you copied from the install command output.
+
If all is well, the command returns a response like this:
+
["source","js",subs="attributes,callouts"]
----
{
  "name" : "Cp9oae6",
  "cluster_name" : "elasticsearch",
  "cluster_uuid" : "AT69_C_DTp-1qgIJlatQqA",
  "version" : {
    "number" : "{version_qualified}",
    "build_type" : "{build_type}",
    "build_hash" : "f27399d",
    "build_flavor" : "default",
    "build_date" : "2016-03-30T09:51:41.449Z",
    "build_snapshot" : false,
    "lucene_version" : "{lucene_version}",
    "minimum_wire_compatibility_version" : "1.2.3",
    "minimum_index_compatibility_version" : "1.2.3"
  },
  "tagline" : "You Know, for Search"
}
----

[discrete]
[[install-stack-self-elasticsearch-config]]
== Step 2: Configure the first {es} node for connectivity

Before moving ahead to configure {es} instances, we'll need to update the {es} configuration on this first node so that other hosts are able to connect to it. This is done by updating the settings in the `elasticsearch.yml` file. For details about all available settings refer to {ref}/settings.html[Configuring {es}].

. Open the {es} configuration file in a text editor, such as `vim`:
+
["source","sh",subs="attributes"]
----
sudo vim /etc/elasticsearch/elasticsearch.yml
----

. In a multi-node {es} cluster, all of the {es} instances need to have the same name.
+
In the configuration file, uncomment the line `#cluster.name: my-application` and give the {es} instance any name that you'd like:
+
[source,shell]
----
cluster.name: elasticsearch-demo
----

. Save your changes and close the editor.

. By default, {es} runs on `localhost`. In order for {es} instances on other nodes to be able to join the cluster, we'll need to set up {es} to run on a routable, external IP address.
+
In a terminal, run `ifconfig` and copy the value for the host inet IP address.

. Reopen the configuration file for editing.

. Uncomment the line `#network.host: 92.168.0.1` and replace the default address with the value that you copied. For example:
+
[source,shell]
----
network.host: 10.128.0.84
----

. Next, {es} needs to be enabled to listen for connections from other, external hosts.
+
Uncomment the line `#transport.host: 0.0.0.0`. The `0.0.0.0` setting enables {es} to listen for connections on all available network interfaces. Note that in a production environment you might want to restrict this by setting this value to match the value set for `network.host`.
+
[source,shell]
----
transport.host: 0.0.0.0
----
+
TIP: You can find details about the `network.host` and `transport.host` settings in the {es} {ref}/modules-network.html[Networking] documentation.

. Save your changes and close the editor.

. Restart {es}:
+
[source,shell]
----
sudo systemctl restart elasticsearch
----

. Finally, check the status of your {es} instance:
+
[source,shell]
----
sudo systemctl status elasticsearch
----
+
The output should confirm that {es} started successfully.
+
In case you'd like more detailed information, you can log into the {es} node through a separate terminal instance and tail the {es} instance log file:
+
[source,shell]
----
sudo tail -f /var/log/elasticsearch/elasticsearch-demo.log
----

. In the log file, look for an entry like `current.health="GREEN"` to confirm that {es} is running as expected. In the event of any issues, the log will contain helpful diagnostic information. You can also refer to the {es} {ref}/troubleshooting.html[Troubleshooting] documentation for many other problem solving tips.

[discrete]
[[install-stack-self-elasticsearch-second]]
== Step 3: Set up a second {es} node

To set up a second {es} node, the initial steps are the same as those you followed for <<install-stack-self-elasticsearch-first>>.

. Create a working directory for the installation package:
+
["source","shell"]
----
mkdir elastic-install-files
----

. Change into the new directory:
+
["source","shell"]
----
cd elastic-install-files
----

. Download the {es} RPM and checksum file:
+
["source","sh",subs="attributes"]
----
wget https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-{version}-x86_64.rpm
wget https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-{version}-x86_64.rpm.sha512
----

. Check the SHA of the downloaded RPM:
+
["source","sh",subs="attributes"]
----
shasum -a 512 -c elasticsearch-{version}-x86_64.rpm.sha512
----

. Run the {es} install command:
+
["source","sh",subs="attributes"]
----
sudo rpm --install elasticsearch-{version}-x86_64.rpm
----
+
Unlike the setup for the first {es} node, in this case you don't need to copy the output of the install command, since these settings will be updated in a later step.

. Enable {es} to run as a service:
+
["source","sh",subs="attributes"]
----
sudo systemctl daemon-reload
sudo systemctl enable elasticsearch.service
----

. To enable this second {es} node to connect to the first, you need to configure an enrollment token. You can find details about these steps in {ref}/rpm.html#_reconfigure_a_node_to_join_an_existing_cluster_2[Reconfigure a node to join an existing cluster] and also in {ref}/add-elasticsearch-nodes.html#_enroll_nodes_in_an_existing_cluster_5[Enroll nodes in an existing cluster].
+
Return to your terminal shell into the first {es} node.

. Generate a node enrollment token:
+
[source,shell]
----
sudo /usr/share/elasticsearch/bin/elasticsearch-create-enrollment-token -s node
----

. Copy the generated enrollment token from the command output.

. In the terminal shell for your second {es} node, pass the enrollment token as a parameter to the `elasticsearch-reconfigure-node` tool:
+
[source,shell]
----
sudo /usr/share/elasticsearch/bin/elasticsearch-reconfigure-node --enrollment-token <enrollment-token>
----
+
In the command, replace `<enrollment-token` with the `elastic` generated token that you copied.

. Answer the `Do you want to continue` prompt with `yes` (`y`). The new {es} node will be reconfigured.

. Open the second {es} instance configuration file in a text editor:
+
["source","sh"]
----
sudo vim /etc/elasticsearch/elasticsearch.yml
----
+
Notice that, as a result of having run the `elasticsearch-reconfigure-node` tool, certain settings have been updated. For example, the `transport.host: 0.0.0.0` setting is already uncommented.

. In the configuration file, uncomment the line `#cluster.name: my-application` and set it to match the name you specified for the first {es} node:
+
[source,shell]
----
cluster.name: elasticsearch-demo
----

. Save your changes and close the editor.

. As with the first {es} node, we'll need to set up {es} to run on a routable, external IP address.
+
In a terminal, run `ifconfig` and copy the value for the host inet IP address.

. Reopen the configuration file for editing.

. Uncomment the line `#network.host: 92.168.0.1` and replace the default address with the value that you copied. For example:
+
[source,shell]
----
network.host: 10.128.0.84
----

. Save your changes and close the editor.

. Start {es} on the second node:
+
[source,shell]
----
sudo systemctl start elasticsearch.service
----

. OPTIONALLY, to view the progress as the second {es} node starts up and connects to the first {es} node, open a new terminal into the second node and tail the {es} log file:
+
[source,shell]
----
sudo tail -f /var/log/elasticsearch/elasticsearch-demo.log
----

. Notice in the log file some helpful diagnostics, such as:
+
* `Security is enabled.`
* `Profiling is enabled`
* `using discovery type [multi-node]``
* `intialized`
* `starting ...`
+
After a minute or so, the log should show a message like:
+
[source,shell]
----
[<hostname2>] master node changed {previous [], current [<hostname1>...]}
----
+
Here, `hostname1` is your first {es} instance node, and `hostname2` is your second {es} instance node.
+
The message indicates that the second {es} node has successfully contacted the initial {es} node and joined the cluster.

[discrete]
[[install-stack-self-elasticsearch-third]]
== Step 4: Set up a third {es} node

To set up your third {es} node, follow exactly the same steps as you did previously in <<install-stack-self-elasticsearch-second>>.





