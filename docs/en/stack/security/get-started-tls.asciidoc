[role="xpack"]
[[get-started-tls]]
=== Secure communications in the cluster

{security} enables you to encrypt traffic to, from, and within your cluster. 
The {stack} uses Transport Layer Security (TLS/SSL) to:

. Ensure only authorized nodes can join an {es} cluster.
. Secure encrypted communications between:
** {es} nodes
** Clients and the {es} cluster
** User web browsers and {kib}
** Beats and {ls}

//TBD: This tutorial covers xxx

[float]
[[get-started-tls-prerequisites]]
==== Before you begin

. Install and configure {es}, {kib}, {ls}, and {metricbeat} as described in 
<<get-started-elastic-stack>>.  

. Stop {ls}. The method for starting and stopping {ls} varies depending on whether 
you are running it from the command line or running it as a service. For example, 
if you are running {ls} from the command line, you can stop it by entering 
`Ctrl-C`. See {logstash-ref}/shutdown.html[Shutting down {ls}]. 

. Stop {metricbeat}. For example, enter `Ctrl-C` on the command line where it is 
running.

. Launch the {kib} web interface by pointing your browser to port 5601. For 
example, http://127.0.0.1:5601[http://127.0.0.1:5601].

. <<get-started-license,Install a trial license>>.

. <<get-started-enable-security,Enable security in {es}>>.

. <<get-started-built-in-users,Create passwords for built-in users>>.
+
--
NOTE: This section of the tutorial does not use the built-in `kibana`, 
`logstash_system`, and `beats_system` users. To learn more about those users, 
see <<built-in-users>>.

--

. <<get-started-kibana-user,Add the built-in user to {kib}>>.

. To verify that security is enabled, run the cat health API. For example:
+
--
[source,sh]
----------------------------------
curl -s -u elastic:<password> -X GET "http://localhost:9200/_cat/health?v"
----------------------------------

Supply a valid user ID (such as `elastic`) and password, such as the one you 
created in <<get-started-users>>. 

--

[role="xpack"]
[[get-started-certificates]]
=== Generate certificates

In a secured cluster, {es} nodes, {kib} instances, {ls} hosts, and Beats use 
certificates to identify themselves when accepting incoming connections and 
connecting to other services. 

The cluster must validate the authenticity of these certificates. The 
recommended approach is to trust a specific certificate authority (CA). Thus 
when nodes are added to your cluster they just need to use a certificate signed 
by the same CA and the node is automatically allowed to join the cluster. 
 
. Generate a certificate authority. For example, use the `elasticsearch-certutil` 
tool by running the following command from the {es} directory:
+
--
["source","sh",subs="attributes,callouts"]
----------------------------------------------------------------------
./bin/elasticsearch-certutil ca
----------------------------------------------------------------------
// NOTCONSOLE

By default, the command prompts you for a password and outputs a single file 
with the name `elastic-stack-ca.p12`. This file is a PKCS#12 keystore that 
contains the public certificate for your CA and the private key that is used to 
sign the node certificates. Store this file securely, since it holds the key to 
your cluster. 

Alternatively, you can use a commercial or organization-specific CA, though that 
scenario is not covered in this tutorial. See the `csr` option in the 
{ref}/certutil.html[elasticsearch-certutil] command. 
--

. Generate a certificate and private key for each node in your cluster. 
+
--
By default, {es} verifies that the certificate is signed by a trusted CA and 
also verifies that the server's hostname or IP address matches the names 
specified within the certificate. If you have a multi-node cluster, you must 
therefore create a separate certificate for each node. You can generate 
certificates and keys for multiple nodes at once by specifying the `--multiple` 
parameter, which prompts you for details about each node or instance.

In this tutorial, however, we are only using a single node cluster, 
// TBD: Is this step even need in a single-node cluster?
so run the following command once from your {es} directory:

["source","sh",subs="attributes,callouts"]
----------------------------------------------------------------------
./bin/elasticsearch-certutil cert --ca elastic-stack-ca.p12 \
--dns <domain_name> <1> --ip <ip_addresses> <2>
----------------------------------------------------------------------
// NOTCONSOLE
<1> A comma-separated list of DNS names for your {es} node.
<2> A comma-separated list of IP addresses for your {es} node.

This command prompts you for passwords. You can enter a password for your 
certificate and key, or you can leave the password blank by pressing *Enter*.

The output from this command is a single PKCS#12 keystore that includes a node 
certificate, node key, and CA certificate. You can alternatively generate 
Privacy Enhanced Mail (PEM) formatted certificates and keys, though that option 
is not covered in this tutorial. 
--

. Copy the node certificate to the {es} configuration directory. For example, 
copy the `.p12` file into a `certs` folder in the {es} `config` directory. If 
you had a multi-node cluster, you would create the `certs` folder on each node 
and copy the appropriate node certificate to each node. 

. Reformat the CA certificate for use by {kib}. 
+
--
{kib} doesn't currently support PKCS#12 keystores, so we must create a PEM 
formatted CA certificate for it. For example:

["source","sh",subs="attributes,callouts"]
----------------------------------------------------------------------
openssl pkcs12 -in elastic-stack-ca.p12 -cacerts -nokeys -out elastic-ca.pem
----------------------------------------------------------------------

In this example, `elastic-stack-ca.p12` is the PKCS#12 keystore containing the 
cluster's CA.
--

. Copy the `elastic-ca.pem` file to your {kib} configuration directory. The 
location of the configuration directory varies depending on how you installed 
{kib}.  See {kibana-ref}/settings.html[Configuring {kib}]. 

. Generate a server certificate for {kib}. 
+
--
//TBD: How do you do this? Is this different than the node certificate created 
//for Elasticsearch? 

For example, run the following command from your {es} directory:

["source","sh",subs="attributes,callouts"]
----------------------------------------------------------------------
./bin/elasticsearch-certutil cert --ca elastic-stack-ca.p12 \
--dns <domain_name> <1> --ip <ip_addresses> <2> --pem
----------------------------------------------------------------------
// NOTCONSOLE
<1> A comma-separated list of DNS names for your {kib} server.
<2> A comma-separated list of IP addresses for your {kib} server.

By default, the output is a `certificate-bundle.zip` file that contains the 
certificate and key files. 
////
//TBD: Is the following information applicable to this command?
You must either set the certificate's `subjectAltName` to the hostname, fully-
qualified domain name (FQDN), or IP address of the Kibana server, or set the CN 
to the {kib} server's hostname or FQDN. Using the server's IP address as the CN 
does not work.
////
--

. Copy the server certificate to the {kib} configuration directory.  For example, 
copy the `certificate-bundle.zip` file into a `certs` folder in the {kib} 
configuration directory. Extract the PEM formatted certificate and private key 
from the zip file.

For more information, see 
{ref}/configuring-tls.html#node-certificates[Generating Node Certificates].

In subsequent steps, we will copy these certificates to the appropriate location 
for each product in the {stack} and specify the location of the certificates and 
private keys in the {es}, {kib}, {ls}, and Beats configuration files. The 
passphrases for the private keys are stored in each productâ€™s secure keystore.

[role="xpack"]
[[get-started-internode]]
=== Encrypt internode communications  

In this tutorial, we are only using a single node cluster, but if you plan to 
add more nodes, you must ensure that communication between those nodes will be 
encrypted. 

Perform the following steps on each node in the cluster:

. Stop {es}. For example, if you installed {es} from an archive distribution, 
enter `Ctrl-C` on the command line. See 
{ref}/stopping-elasticsearch.html[Stopping {es}].

. Enable TLS for transport communications between nodes within the cluster. For 
example, add the following setting in the `ES_PATH_CONF/elasticsearch.yml` file:
+
--
[source,yaml]
----
xpack.security.transport.ssl.enabled: true  
----
--

. Configure each node in the cluster to identify itself using its signed
certificate. For example, add the following settings in the 
`ES_PATH_CONF/elasticsearch.yml` file, using the file and path names that you 
created in previous steps:
+
--
[source,yaml]
----
xpack.security.transport.ssl.keystore.path: certs/elastic-certificates.p12 
xpack.security.transport.ssl.truststore.path: certs/elastic-certificates.p12 
----

If you had a multi-node cluster and you created a separate certificate for each 
node, you must customize this path on each node. If the filename matches the 
node name, you can simply use the value `certs/${node.name}.p12`.

NOTE: The PKCS#12 keystore that is output by the `elasticsearch-certutil` 
command includes a CA certificate as a trusted certificate entry, thus the 
keystore can also be used as a truststore. If you use other tools to manage and 
generate your certificates, you might have different values for these settings.

--

. If you specified a password for the certificates, add that password to the 
{es} keystore.  For example: 
+
--
["source","sh",subs="attributes,callouts"]
----------------------------------------------------------------------
./bin/elasticsearch-keystore add xpack.security.transport.ssl.keystore.secure_password
./bin/elasticsearch-keystore add xpack.security.transport.ssl.truststore.secure_password
----------------------------------------------------------------------
--

. Restart {es}. For example, if you installed {es} with a `.tar.gz` package, run 
the following command from the {es} directory:
+
--
["source","sh",subs="attributes,callouts"]
----------------------------------------------------------------------
./bin/elasticsearch
----------------------------------------------------------------------

See {ref}/starting-elasticsearch.html[Starting {es}].  
--

//TBD: What impact should users see now that this is enabled? If a new node is 
//added that does not have TLS enabled, does it fail to join the cluster?

At this point, you have met the requirements to pass the 
{ref}/bootstrap-checks-xpack.html#_ssl_tls_check[TLS bootstrap check].

[role="xpack"]
[[get-started-http-elasticsearch]]
=== Encrypt HTTP client communications 

You can optionally enable TLS on the HTTP layer to ensure that communication 
between the HTTP clients and the cluster is encrypted. See 
{ref}/configuring-tls.html#tls-http[Encrypting HTTP client communications].

NOTE: Enabling TLS on the HTTP layer is strongly recommended but is not required. 
If you enable TLS on the HTTP layer in {es}, you must make configuration changes 
in other parts of the {stack} and in any {es} clients that you use.

Perform the following steps on each node in the cluster:

. Stop {es}. For example, if you installed {es} from an archive distribution, 
enter `Ctrl-C` on the command line. See {ref}/stopping-elasticsearch.html[Stopping {es}].

. Enable TLS for HTTP communications. For example, add the following setting in 
the `ES_PATH_CONF/elasticsearch.yml` file:
+
--
[source,yaml]
----
xpack.security.http.ssl.enabled: true  
----
--
 
. Configure each node in the cluster to identify itself using its signed
certificate. For example, add the following settings in the 
`ES_PATH_CONF/elasticsearch.yml` file, using the file and path names that you 
created in previous steps:
+
--
[source,yaml]
----
xpack.security.http.ssl.keystore.path: certs/elastic-certificates.p12 
xpack.security.http.ssl.truststore.path: certs/elastic-certificates.p12 
----

If you have a multi-node cluster and you created a separate certificate for each 
node, you must customize this path on each node. If the filename matches the 
node name, you can simply use the value `certs/${node.name}.p12`.
--

. If you specified a password for the certificates, add that password to the 
{es} keystore.  For example: 
+
--
["source","sh",subs="attributes,callouts"]
----------------------------------------------------------------------
./bin/elasticsearch-keystore add xpack.security.http.ssl.keystore.secure_password
./bin/elasticsearch-keystore add xpack.security.http.ssl.truststore.secure_password
----------------------------------------------------------------------
--

. Restart {es}. For example, if you installed {es} with a `.tar.gz` package, run 
the following command from the {es} directory:
+
--
["source","sh",subs="attributes,callouts"]
----------------------------------------------------------------------
./bin/elasticsearch
----------------------------------------------------------------------

See {ref}/starting-elasticsearch.html[Starting {es}].  
--

. When you run `curl` commands, you must now use the HTTPS protocol and specify 
a valid certificate in the `--cacert` parameter. For example:
+
--
[source,sh]
----------------------------------
curl -s -u elastic:<password> -X GET "https://localhost:9200/_cat/health?v" --cacert /path/to/your/elastic-ca.pem 
----------------------------------

//TBD: Why does this command fail to return any results except when -k is used?
--

[role="xpack"]
[[get-started-tls-kibana]]
=== Configure TLS in {kib}

To encrypt communications between your browser, {kib}, and {es}:

. Optional: Enable TLS for outgoing requests from the {kib} server to the 
browser. Specify the location of the PEM formatted SSL certificate and key files 
by adding the following settings in the `kibana.yml` file in your {kib} 
configuration directory:
+
--
[source,yaml]
----
server.ssl.enabled: true
server.ssl.key: /path/to/your/instance.key
server.ssl.certificate: /path/to/your/instance.crt
----

These settings must contain fully-qualified paths to server certificate and key 
files that you created for {kib}. See <<get-started-certificates>>. 
--

. If you 
<<get-started-http-elasticsearch,configured {es} to encrypt HTTP client communications>>, 
you must also configure {kib} to use HTTPS. 
//Otherwise you receive error messages in the {kib} log about an inability to revive connections and error messages in the {es} log about exceptions while handling client HTTP traffic. 

.. Specify the HTTPS protocol in the `elasticsearch.url` setting in the 
`kibana.yml` file:
+
--
[source,yaml]
----
elasticsearch.url: "https://<your_elasticsearch_host>:9200"
----
--

.. Specify the location of the PEM formatted CA certificate that you created for 
{kib}. Add the following setting in the `kibana.yml` file:
+
--
[source,yaml]
----
elasticsearch.ssl.certificateAuthorities: ["/path/to/your/elastic-ca.pem"]
----
--

////
. Ensure that your {es} backend uses the same key files. 
//TBD: This step is unclear. Is it necessary and what does it accomplish?
+
--
[source,yaml]
----
elasticsearch.ssl.key: /path/to/your/server.key
elasticsearch.ssl.certificate: /path/to/your/server.crt

----
--
////

. Restart {kib}. For example, if you installed 
{kib} with a `.tar.gz` package, run the following command from the {kib} 
directory:
+
--
["source","sh",subs="attributes,callouts"]
----------------------------------------------------------------------
./bin/kibana
----------------------------------------------------------------------

See {kibana-ref}/start-stop.html[Starting and stopping {kib}]. 
--

. Launch the {kib} web interface by pointing your browser to port 5601. For 
example, https://127.0.0.1:5601[https://127.0.0.1:5601].

////
[role="xpack"]
[[get-started-tls-logstash]]
=== Configure TLS in {ls}

Configure Logstash to use TLS encryption. See
{logstash-ref}/ls-security.html[Configuring Security in Logstash].

[role="xpack"]
[[get-started-tls-beats]]
=== Configure TLS in {metricbeat}

Configure Beats to use encrypted connections. See <<beats>>.

[[get-started-nextsteps]]
=== What's next?

Congratulations! You've successfully encrypted communications in the {stack}.  

Next, you'll want to try other features that are unlocked by your trial license, 
such as {ml}. See <<ml-getting-started,Getting started with {ml}>>. 

//. Configure TLS for communications between nodes in a cluster.
//. Configure {monitoring} to use encrypted connections. See <<secure-monitoring>>.
//. Configure the Java transport client to use encrypted communications. See <<java-clients>>.
//. Configure {es} for Apache Hadoop to use secured transport. See {hadoop-ref}/security.html[{es} for Apache Hadoop Security].

For more detailed information about securing the {stack}, see:

* {ref}/configuring-security.html[Configuring security in {es}]. Encrypt 
inter-node communications, set passwords for the built-in users, and manage your 
users and roles.  

* {kibana-ref}/using-kibana-with-security.html[Configuring security in {kib}]. 
Set the authentication credentials in {kib} and encrypt communications between 
the browser and the {kib} server.

* {logstash-ref}/ls-security.html[Configuring security in Logstash]. Set the 
authentication credentials for Logstash and encrypt communications between 
Logstash and {es}. 

* <<beats,Configuring security in the Beats>>. Configure authentication 
credentials and encrypt connections to {es}. 

* <<java-clients,Configuring the Java transport client to use encrypted communications>>.

* {hadoop-ref}/security.html[Configuring {es} for Apache Hadoop to use secured transport]. 

////