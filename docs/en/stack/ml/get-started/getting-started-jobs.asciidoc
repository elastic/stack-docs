[role="xpack"]
[[ml-gs-jobs]]
== Create sample {ml} jobs in {kib}
++++
<titleabbrev>Create jobs</titleabbrev>
++++

Now that we have taken a quick look at the type of data that is stored in the 
`kibana_sample_data_logs` index, let's create some {ml} jobs to start analyzing
the data.

The {kib} sample data sets include some pre-configured {anomaly-jobs} for you to
play with. You can use either of the following methods to add the jobs:

* After you load the sample web logs data set on the {kib} home page, click
*View data* > *ML jobs*.
* In the Machine Learning app, when you select the `kibana_sample_data_logs`
index pattern in the *Data Visualizer* or the *Anomaly Detection* job wizards,
it recommends that you create a job using its known configuration. Select the
*Kibana sample data web logs* configuration.

[role="screenshot"]
image::images/ml-gs-create-web-jobs-1.jpg["Create jobs for the sample web logs"]

Accept the default values and click *Create Jobs*.

When all the jobs and {dfeeds} are created and started, you receive a summary: 

[role="screenshot"]
image::images/ml-gs-create-web-jobs-2.jpg["Create jobs for the sample web logs"]

The wizard creates three jobs and three {dfeeds}. <<ml-dfeeds,{dfeeds-cap}>>
retrieve data from {es} indices and provide it {anomaly-jobs} for analysis. If
you want to see all of the configuration details for these jobs and {dfeeds},
you can do so on the *Machine Learning* > *Anomaly Detection* > *Job Management*
page. For the purposes of this tutorial, however, we'll just do a quick overview
of the goal of each job:

* `low_request_rate` uses the <<ml-count,`low_count` function>> to
find unusually low request rates.
* `response_code_rates` uses the <<ml-count,`count` function>> and
partitions the analysis by `response.keyword` values to find unusual event rates
by HTTP response code.
* `url_scanning` uses the <<ml-distinct-count,`high_distinct_count` function>>
and performs <<ml-configuring-pop,population analysis>> on the `clientip` field
to find client IPs accessing an unusually high distinct count of URLs.

The next step is to view the results and see what types of insights these {ml}
jobs have generated! 

[TIP]
--
This tutorial uses {kib} to create jobs and view results, but you can
alternatively use APIs to accomplish most tasks.
For API reference information, see {ref}/ml-apis.html[Machine learning APIs].
--
