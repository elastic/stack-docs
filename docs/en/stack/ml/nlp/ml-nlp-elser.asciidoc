[[ml-nlp-elser]]
= ELSER â€“ Elastic Learned Sparse Encoder
++++
<titleabbrev>ELSER</titleabbrev>
++++

:keywords: {ml-init}, {stack}, {nlp}, ELSER
:description: ELSER is a learned sparse ranking model trained by Elastic.

experimental[]

[discrete]
[[air-gapped-install]]
== Deploy ELSER in an air-gapped environment

If you want to deploy a downloadable NLP model provided and trained by Elastic 
in a restricted or closed network, you have two options:

* create your own HTTP/HTTPS endpoint with the model artifacts on it,
* put the model artifacts into a directory inside the config directory on all 
{ref}/modules-node.html#master-node[master-eligible nodes].

For example, for <<ml-nlp-elser,ELSER>>, you need the following files in your 
system:

```
https://ml-models.elastic.co/elser_model_1.metadata.json
https://ml-models.elastic.co/elser_model_1.pt
https://ml-models.elastic.co/elser_model_1.vocab.json
```


[discrete]
==== Using an HTTP server

INFO: If you use an existing HTTP server, note that the model downloader only 
supports passwordless HTTP servers.

You can use any HTTP service to deploy a model. This example uses the official 
Nginx Docker image to set a new HTTP download service up.

. Download the model artifact files from https://ml-models.elastic.co/.
. Put the files into a subdirectory of your choice.
. Run the following commands:
+
--
[source, shell]
--------------------------------------------------
export ELASTIC_ML_MODELS="/path/to/models"
docker run --rm -d -p 8080:80 --name ml-models -v ${ELASTIC_ML_MODELS}:/usr/share/nginx/html nginx
--------------------------------------------------

Don't forget to change `/path/to/models` to the path of the subdirectory where 
the model artifact files are located.

These commands start a local Docker image with an Nginx server with the 
subdirectory containing the model files. As the Docker image has to be 
downloaded and built, the first start might take a longer period of time. 
Subsequent runs start quicker.
--
. Verify that Nginx runs properly by visiting the following URL in your 
browser:
+
--
```
http://{IP_ADDRESS_OR_HOSTNAME}:8080/elser_model_1.metadata.json
```

If Nginx runs properly, you see the content of the metdata file of the model.
--
. Point your Elasticsearch deployment to the model artifacts on the HTTP server
by adding the following line to the `config/elasticsearch.yml` file: 
+
--
```
xpack.ml.model_repository: http://{IP_ADDRESS_OR_HOSTNAME}:8080
```

If you use your own HTTP or HTTPS server, change the address accordingly. It is 
important to specificy the protocol ("http://" or "https://"). Ensure that all 
master-eligible nodes can reach the server you specify.
--
. Repeat step 5 on all master-eligible nodes.
. {ref}/restart-cluster.html#restart-cluster-rolling[Restart] the 
master-eligible nodes one by one. 

The HTTP server is only required for downloading the model. After the download 
has finished, you can stop and delete the service. You can stop the Docker image 
used in this example by running the following command:

[source, shell]
--------------------------------------------------
docker stop ml-models
--------------------------------------------------


[discrete]
==== Using file-based access

For a file-based access, follow these steps:

. Download the model artifact files from https://ml-models.elastic.co/.
. Put the files into a `models` subdirectory inside the `config` directory of 
your Elasticsearch deployment.
. Point your Elasticsearch deployment to the model directory by adding the 
following line to the `config/elasticsearch.yml` file:
+
--
```
xpack.ml.model_repository: file://${path.home}/config/models/`
```
--
. Repeat step 2 and step 3 on all master-eligible nodes.
. {ref}/restart-cluster.html#restart-cluster-rolling[Restart] the 
master-eligible nodes one by one.
