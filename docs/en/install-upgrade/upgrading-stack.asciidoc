[[upgrading-elastic-stack]]
= Upgrade to Elastic {version}

Upgrading to the latest version provides you access to Elastic latest features, enhancements, performance improvements, and bug fixes, many of which enable you to save your organization money, respond faster to potential threats, and improve the tools you use to investigate and analyze your data. As new versions are released, older versions reach their end of life at a regular cadence, so it’s important to ensure that your deployment is fully maintained and supported. For more information, refer to Elastic’s https://www.elastic.co/support/eol[Product End of Life Dates]. 

[discrete]
[[plan-upgrade]]
== Plan your upgrade 

Before you upgrade, there are a number of things that you need to plan for before performing the actual upgrade, so create a test plan. Consider the following recommendations: 

* Plan for an appropriate amount of time to complete the upgrade. Depending on your configuration and the size of your cluster, the process can take up a few weeks or or more to complete.

* Consider opening a https://support.elastic.co/case[support case] with Elastic to alert our Elastic Support team of your system change. If you need additional assistance, https://www.elastic.co/consulting[Elastic Consulting Services] provides the technical expertise and step-by-step approach for upgrading your Elastic deployment.

* Schedule a system maintenance window within your organization.

**Check system requirements**

Ensure the version you’re upgrading to for Elasticsearch, Kibana, and any ingest components supports your current operating system. Refer to the Product and Operating System https://www.elastic.co/support/matrix#matrix_os[support matrix]. 

**JVM and FIPS compliance**

By default, {es} includes a bundled Java Virtual Machine (JVM) supported by Elastic. While we strongly recommend using the bundled JVM in all installations of Elasticsearch, if you choose to use your own JVM, ensure it’s compatible by reviewing the Product and JVM https://www.elastic.co/support/matrix#matrix_jvm[support matrix]. {es} 9.0+ requires Java 21 or later. 

If you’re running {es} in FIPS 140-2 mode, {es} 9.0+ has been tested with https://www.bouncycastle.org/java.html[Bouncy Castle]'s FIPS implementation and is the recommended Java security provider when running Elasticsearch. 

*Conduct a component inventory*

It is very important to map all the components that are being used on the {stack}. When you upgrade your deployment, you may also need to upgrade all the other components. You should record if each component is used, and if it is, you should record its current version. While this is not a comprehensive list, here are some components you should check:  

* {es}
* {es} Hadoop
* {es} Plugins
* {es} clients
* {kib}
* {ls}
* {ls} plugins
* {beats}
* {beats} modules
* {apm-agent}s
* APM server
* {agent}
* {fleet}
* Enterprise Search server
* Security
* Browsers
* External services (Kafka, etc.)

TIP: When you do your inventory, you can {ref}/enable-audit-logging.html[enable audit logging] to evaluate resources that are accessing your deployment.

[discrete]
[[choose-upgrade-path]]
== Choose your upgrade path

The procedures you follow to upgrade depend on your infrastructure and deployment method. You’ve installed Elastic components using either Elastic-managed infrastructure or self-managed infrastructure. 

Elastic-managed infrastructure includes {ecloud} – the umbrella term for {ecloud} Hosted (ECH) and {serverless-full}. {serverless-full} (“Serverless”) is the fully managed cloud offering and has three products: {es-serverless}, {obs-serverless}, and {sec-serverless}. All serverless products are built on top of the Search AI Lake. Customers receive the latest features automatically when updates are published.  

{ecloud} Hosted is Elastic’s cloud offering for managing {stack} deployments, built on top of {es}. A single click in the {ecloud} console can upgrade a deployment to a newer version.

Self-managed infrastructure — either on-prem or on public cloud, includes: 

* {stack}
* {ece} (ECE)
* {eck} (ECK)

For ECE and ECK, you need to ensure the orchestrator is running a compatible version with the {stack} version you’re upgrading to. If not, you need to <<upgrade-orchestrator,upgrade>> your orchestrator before you can upgrade your cluster. 

If you’re running the {stack} on your own self-managed infrastructure, you’ll need to upgrade each component individually. 


[discrete]
[[prepare-upgrade-9.0]]
== Prepare to upgrade

Before you upgrade to {version}, it's important to take some preparation steps. Unless noted, these following recommendations are best practices regardless of deployment method. 

IMPORTANT: Upgrading from a release candidate build, such as 9.0.0-rc1 or 9.0.0-rc2, is not supported. Pre-releases should only be used for testing in a temporary environment.

To upgrade to {version} from 8.17 or earlier, **you must first upgrade to the latest patch version of 8.18**. This enables you to use the **Upgrade Assistant** to identify and resolve issues,
reindex indices created before 8.0, and then perform a rolling upgrade.

*Upgrading to 8.18 before upgrading to {version} is required 
even if you opt to do a full-cluster restart of your {es} cluster.*

Alternatively, you can create a new {version} deployment and reindex from remote.
For more information, refer to <<upgrading-reindex,Reindex to upgrade>>.

{beats} and {ls} 8.17 are compatible with {es} {version} 
to give you flexibility in scheduling the upgrade.

.Remote cluster compatibility
[NOTE]
====
If you use {ccs}, note that {version} can only search remote clusters running the previous minor version or later. 
For more information, see {ref}/modules-cross-cluster-search.html[Searching across clusters].

If you use {ccr}, a cluster that contains follower indices must run the same or newer version as the remote cluster. 
For more information, see {ref}/xpack-ccr.html[Cross cluster replication] for version compatibility matrix.

You can view your remote clusters from **Stack Management > Remote Clusters**. 
====

. Once you've upgraded to 8.18, use the {kibana-ref}/upgrade-assistant.html[*Upgrade Assistant*] to prepare for your upgrade from 8.18 to {version}. The Upgrade Assistant identifies deprecated settings and guides you through resolving issues and reindexing indices created before 8.0. {es} fully supports indices created in the current or previous major version. Older indices are partly supported as read-only archives with limited capabilities.
//For example, {es} {version} fully supports indices, data streams, and searchable snapshots created in {es}8.x, but those created in {es} 7.x would be read-only and indices Elasticsearch 6.x or older would not be compatible with Elasticsearch 9.x.//

. Ensure you have a current {ref}/snapshots-take-snapshot.html[snapshot] before making configuration changes or reindexing.
*You must resolve all critical issues before proceeding with the upgrade.* If you make any additional changes, take a new snapshot to back up your data. 
+
NOTE: If you’re upgrading on {ecloud} Hosted, to keep your data safe during the upgrade process, a snapshot is taken automatically before any changes are made to your cluster. If you’re upgrading on {ece}, you need to {ece-ref}/ece-manage-repositories.html[configure a snapshot repository] to enable snapshots.

. Ensure you carefully review the deprecation logs from the Upgrade Assistant to determine if your applications are using features that are not supported or behave differently in {version}. 

. Major version upgrades can include breaking changes that require you to take additional steps to ensure that your applications behave as expected after the upgrade. Review all {version} <<elastic-stack-breaking-changes,breaking changes>> for each product you use to view more information about changes that could affect your application. Ensure you test against the new version before upgrading existing deployments.
+
IMPORTANT: Ensure you check the breaking changes for each minor 8.x release up to {version}.
. Make the recommended changes to ensure that your clients continue to operate as expected after the upgrade. 
+
NOTE: As a temporary solution, you can submit requests to {major-version}
using the {prev-major-version} syntax with the REST API compatibility mode.
While this enables you to submit requests that use the old syntax, 
it does not guarantee the same behavior. 
REST API compatibility should be a bridge to smooth out the upgrade process,
not a long term strategy. 
For more information, see {ref}/rest-api-compatibility.html[REST API compatibility].
. If you use any {es} plugins, ensure there is a version of each plugin that is compatible with {version}. 
. We recommend creating a 9.0 test deployment and testing the upgrade in an isolated environment before upgrading your production deployment. Ensure that both your test and production environments have the same settings.
+
IMPORTANT: You cannot downgrade {es} nodes after upgrading. If you cannot complete the upgrade process, you will need to {ref}/snapshots-restore-snapshot.html[restore from the snapshot].
+
. If you use a separate {ref}/monitoring-production.html[monitoring cluster], you should upgrade the monitoring cluster before the production cluster. In general, the monitoring cluster and the clusters being monitored should be running the same version of the stack. A monitoring cluster cannot monitor production clusters running newer versions of the stack. If necessary, the monitoring cluster can monitor production clusters running the latest release of the previous major version.





////
Before you upgrade to {version}, it's important to take some preparation steps.
ifeval::["{version}"!="8.0.0"]
These steps vary based on your current version:

* <<prepare-to-upgrade-8x,Upgrade from an earlier 8.x version>>
* <<prepare-to-upgrade,Upgrade from 7.x>>
endif::[]

IMPORTANT: Upgrading from a release candidate build, such as 8.0.0-rc1 or
8.0.0-rc2, is not supported. Pre-releases should only be used for testing in a
temporary environment.

ifeval::["{version}"!="8.0.0"]
[discrete]
[[prepare-to-upgrade-8x]]
=== Prepare to upgrade from an earlier 8.x version

. Review the breaking changes for each product you use and make the necessary
changes so your code is compatible with {version}:
+
--
include::breaking.asciidoc[tag=breaking-changes-links]

include::breaking.asciidoc[tag=breaking-changes-admon]
--

include::upgrading-stack.asciidoc[tag=generic-upgrade-steps]
endif::[]

////
// List of upgrade steps used in both 8.x and 7.x
// tag::generic-upgrade-steps[]
//. If you use any {es} plugins, make sure there is a version of each plugin that is compatible with {es} version {version}.

//. Test the upgrade in an isolated environment before upgrading your production cluster.

//. Make sure you have a current snapshot before you start the upgrade.
//+
//IMPORTANT: You cannot downgrade {es} nodes after upgrading. 
//If you cannot complete the upgrade process, you will need to restore from the snapshot.

//. If you use a separate {ref}/monitoring-production.html[monitoring cluster], you should upgrade the monitoring cluster before the production cluster. In general, the monitoring cluster and the clusters being monitored should be running the same version of the stack. A monitoring cluster cannot monitor production clusters running newer versions of the stack. If necessary, the monitoring cluster can monitor production clusters running the latest release of the previous major version.
// 
// end::generic-upgrade-steps[]

