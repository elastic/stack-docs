[[get-started-stack-docker]]
== Running the {stack} ("ELK") on Docker
++++
<titleabbrev>Running the {stack} on Docker</titleabbrev>
++++

The Elastic Docker registry contains Docker images for all the products in
the {stack}: https://www.docker.elastic.co/.

You can <<run-docker-secure,start the {stack} in Docker>> with security enabled
and configured by default. This option is great for quickly getting started with
{es} and {kib} for testing and development.

You can also <<get-started-docker-tls,start the {stack} with Docker Compose>> to
create a secured, multi-node cluster with a connected {kib} instance. This
option requires more manual steps, but results in a more robust cluster.

[[run-docker-secure]]
[discrete]
=== Start {es} and {kib} in Docker
Starting in {es} 8.0, security is enabled by default. With security enabled,
{stack} {security-features} require TLS encryption for the transport networking
layer, or your cluster will fail to start.

If you're starting a single-node {es} cluster in a Docker container, security
will be automatically enabled and configured for you. When you start {es} for
the first time, the following security configuration occurs automatically:

* {ref}/configuring-stack-security.html#stack-security-certificates[Certificates and keys] are generated
for the transport and HTTP layers.
* The Transport Layer Security (TLS) configuration settings are written to
`elasticsearch.yml`.
* A password is generated for the `elastic` user.
* An enrollment token is generated for {kib}.

You can then {kibana-ref}/docker.html[start {kib}] and enter the enrollment
token, which is valid for 30 minutes. This token automatically applies the
security settings from your {es} cluster, authenticates to {es} with the
`kibana_system` user, and writes the security configuration to `kibana.yml`.

[discrete]
==== Prerequisites
. Install the appropriate https://docs.docker.com/get-docker/[Docker application]
for your operating system.
+
[NOTE]
====
Make sure that Docker is allotted at least 4GiB of memory. In Docker Desktop,
you configure resource usage on the Advanced tab in Preference (macOS) or
Settings (Windows).
====

. Pull the {es} Docker image.
+
--
ifeval::["{release-state}"=="unreleased"]

WARNING: Version {version} of {es} has not yet been released, so no
Docker image is currently available for this version.

endif::[]

ifeval::["{release-state}"!="unreleased"]

[source,sh,subs="attributes"]
----
docker pull docker.elastic.co/elasticsearch/elasticsearch:{version}
----

endif::[]
--

. Pull the {kib} Docker image.
+
--
ifeval::["{release-state}"=="unreleased"]

WARNING: Version {version} of {es} has not yet been released, so no
Docker image is currently available for this version.

endif::[]

ifeval::["{release-state}"!="unreleased"]

[source,sh,subs="attributes"]
----
docker pull docker.elastic.co/kibana/kibana:{version}
----

endif::[]
--

[discrete]
==== Start a single-node {es} cluster and enroll {kib}

The following command starts a single-node {es} cluster for development or
testing.

. Start {es} in Docker. A password is generated for the `elastic` user and
output to the terminal, plus an enrollment token for enrolling {kib}.
+
--
ifeval::["{release-state}"!="unreleased"]
[source,sh,subs="attributes"]
----
docker run --name es-node01 -p 9200:9200 -p 9300:9300 -it docker.elastic.co/elasticsearch/elasticsearch:{version}
----

endif::[]
--
+
TIP: You might need to scroll back a bit in the terminal to view the password
and enrollment token.

. Copy the generated password and enrollment token and save them in a secure
location. These values are shown only when you start {es} for the first time.
+
[NOTE]
====
If you need to reset the password for the `elastic` user or other
built-in users, run the {ref}/reset-password.html[`elasticsearch-reset-password`]
tool. To generate new enrollment tokens for {kib} or {es} nodes, run the
{ref}/create-enrollment-token.html[`elasticsearch-create-enrollment-token`] tool.
These tools are available in the {es} `bin` directory of the Docker container.
For example:

[source,sh]
----
docker exec -it es-node01 /usr/share/elasticsearch/bin/reset-elastic-password
----
====

. Copy the `http_ca.crt` security certificate from your Docker container to
your local machine.
+
[source,sh]
----
docker cp es-node01:/usr/share/elasticsearch/config/tls_auto_config_*/http_ca.crt .
----

. Open a new terminal and verify that you can connect to your {es}
cluster by making an authenticated call, using the `http_ca.crt` file that you
copied from your Docker container. Enter the password for the `elastic` user
when prompted.
+
[source,sh]
----
curl --cacert http_ca.crt -u elastic https://localhost:9200
----
// NOTCONSOLE

. In a new terminal session, start {kib} and connect it to your {es} container:
+
[source,sh,subs="attributes"]
----
docker run --name kib-01 --net elastic -p 5601:5601 docker.elastic.co/kibana/kibana:{version}
----
+
When you start {kib}, a unique link is output to your terminal.

. To access {kib}, click the generated link in your terminal.

  .. In your browser, paste the enrollment token that you copied when starting
  {es} and click the button to connect your {kib} instance with {es}.

  .. Log in to {kib} as the `elastic` user with the password that was generated
  when you started {es}.

[discrete]
[[get-started-docker-tls]]
=== Start the {stack} with Docker Compose

To get a multi-node {es} cluster and {kib} up and running in Docker with
security enabled, you can use Docker Compose:

. Create the following compose and configuration files.
These files are also available from the
https://github.com/elastic/stack-docs/blob/master/docs/en/getting-started/docker/[elastic/stack-docs]
repository on GitHub.
+
--
ifeval::["{release-state}"=="unreleased"]
NOTE: Version {version} of {es} has not been released,
so the sample compose and configuration files are not yet available for this version.
See the {stack-gs-current}/get-started-docker.html[current version] for the latest sample files.
endif::[]

* `instances.yml` identifies the instances you need to create certificates for.
* `.env` sets environment variables to specify the {es} version and
the location where the {es} certificates will be created.
* `create-certs.yml` is a Docker Compose file that launches a container to generate the certificates
for {es} and {kib}.
* `elastic-docker-tls.yml` is a Docker Compose file that brings up a three-node {es} cluster
and a {kib} instance with TLS enabled so you can see how things work.
This all-in-one configuration is a handy way to bring up your first dev cluster before
you build a distributed deployment with multiple hosts.

ifeval::["{release-state}"!="unreleased"]
.`instances.yml`:
["source","yaml"]
----
include::docker/instances.yml[]
----

.`.env`:
["source","txt",subs="attributes"]
----
include::docker/.env[]
----

.`create-certs.yml`:
["source","txt"]
----
include::docker/create-certs.yml[]
----

.`elastic-docker-tls.yml`:
["source","txt"]
----
include::docker/elastic-docker-tls.yml[]
----

<1> Generate and apply a trial license that supports Transport Layer Security.
<2> Enable Transport Layer Security to encrypt client communications.
<3> Enable Transport Layer Security to encrypt internode communications.
<4> Allow the use of self-signed certificates by not requiring hostname verification.
endif::[]
--

. Make sure that Docker is allotted at least 4GiB of memory. In Docker Desktop,
you configure resource usage on the Advanced tab in Preference (macOS) or
Settings (Windows).

. Generate certificates for {es} by bringing up the `create-certs` container:
+
--
["source","sh"]
----
docker-compose -f create-certs.yml run --rm create_certs
----

--

. Bring up the three-node {es} cluster:
+
--
["source","sh"]
----
docker-compose -f elastic-docker-tls.yml up -d
----

IMPORTANT: At this point, {kib} cannot connect to the {es} cluster.
You must generate a password for the built-in `kibana_system` user, update the `ELASTICSEARCH_PASSWORD`
in the compose file, and restart to enable {kib} to communicate with the secured cluster.

--

. Run the `elasticsearch-setup-passwords` tool to generate passwords for all built-in users,
including the `kibana_system` user. If you don't use PowerShell on Windows, remove the trailing `\`characters
and join the lines before running this command.
+
--
["source","sh"]
----
docker exec es01 /bin/bash -c "bin/elasticsearch-setup-passwords \
auto --batch --url https://es01:9200"
----

IMPORTANT: Make a note of the generated passwords.
You must configure the `kibana_system` user password in the compose file to enable {kib} to connect to {es},
and you'll need the password for the `elastic` superuser to
log in to {kib} and submit requests to {es}.
--

. Set `ELASTICSEARCH_PASSWORD` in the `elastic-docker-tls.yml` compose file to the password
generated for the `kibana_system` user.
+
--
ifeval::["{release-state}"=="unreleased"]
NOTE: Version {version} of {es} has not been released,
so the sample compose file is not yet available for this version.
See the {stack-gs-current}/get-started-docker.html[current version] for the latest sample files.
endif::[]

ifeval::["{release-state}"!="unreleased"]
["source","yaml",subs=+quotes]
----
  kib01:
    image: docker.elastic.co/kibana/kibana:${VERSION}
    container_name: kib01
    depends_on: {"es01": {"condition": "service_healthy"}}
    ports:
      - 5601:5601
    environment:
      SERVERNAME: localhost
      ELASTICSEARCH_URL: https://es01:9200
      ELASTICSEARCH_HOSTS: https://es01:9200
      ELASTICSEARCH_USERNAME: kibana_system
      **ELASTICSEARCH_PASSWORD: CHANGEME**
      ELASTICSEARCH_SSL_CERTIFICATEAUTHORITIES: $CERTS_DIR/ca/ca.crt
      SERVER_SSL_ENABLED: "true"
      SERVER_SSL_KEY: $CERTS_DIR/kib01/kib01.key
      SERVER_SSL_CERTIFICATE: $CERTS_DIR/kib01/kib01.crt
    volumes:
      - certs:$CERTS_DIR
    networks:
      - elastic
----
endif::[]
--

. Use `docker-compose` to restart the cluster and {kib}:
+
--
["source","sh"]
----
docker-compose stop
docker-compose -f elastic-docker-tls.yml up -d
----
--

. Open {kib} to load sample data and interact with the cluster:
https://localhost:5601.
+
NOTE: Because SSL is also enabled for communications between {kib} and client browsers,
you must access {kib} via the HTTPS protocol.

When you're done experimenting, you can tear down the containers, network, and
volumes by running `docker-compose -f elastic-docker-tls.yml down -v`.

[discrete]
[[load-settings-file]]
==== Loading settings from a file

Specifying settings for {es} and {{kib}} directly in the compose file is a convenient way to get started,
but loading settings from a file is preferable once you get past the experimental stage.

For example, to use `es01.yml` as the configuration file for the `es01` {es} node,
you can create a bind mount in the volumes section.

["source","yaml"]
----
    volumes:
      - data01:/usr/share/elasticsearch/data
      - certs:$CERTS_DIR
      - ./es01.yml:/usr/share/elasticsearch/config/elasticsearch.yml
----

Similarly, to load {kib} settings from a file, you overwrite `/usr/share/kibana/config/kibana.yml`:

["source","yaml"]
----
    volumes:
      - certs:$CERTS_DIR
      - ./kibana.yml:/usr/share/kibana/config/kibana.yml
----

[discrete]
=== Product-specific instructions for Docker

See the product-specific documentation for information about running a specific Elastic product in Docker:

* {ref}/docker.html[Install {es} with Docker]
* {fleet-guide}/elastic-agent-container.html[Run Elastic Agent in a container]
