[role="xpack"]
[[ootb-ml-jobs]]
== Prebuilt {anomaly-jobs}

{anomaly-jobs-cap} contain the configuration information and metadata necessary 
to perform an analytics task. {kib} can recognize certain types of data and 
provide specialized wizards for that context. This page lists the available 
prebuilt {anomaly-jobs} that you can use via {kib}.


[float]
[[ootb-ml-jobs-apache]]
=== Apache

// tag::apache-jobs[]
These {anomaly-job} wizards appear in {kib} if you use 
{filebeat-ref}/index.html[{filebeat}] to ship access logs from your 
https://httpd.apache.org/[Apache] HTTP servers to {es} and store it using fields 
and datatypes from the Elastic Common Schema (ECS).

low_request_rate_ecs::

* For HTTP web access logs where `event.dataset` is `apache.access`.
* Models the event rate of HTTP requests. 
* Detects unusually low counts of HTTP requests compared to the previous event 
  rate (using the <<ml-count,`low_count` function>>).

////
Bucket span: 15m.

Function: `low_count`.
////

source_ip_request_rate_ecs::

* For HTTP web access logs where `event.dataset` is `apache.access`.
* Models the event rate of HTTP requests by source IP.
* Detects source IPs with unusually high request rates in the HTTP access log 
  compared to the previous rate (using the <<ml-count,`high_count` function>>).

////
Influencers:

* `source.address`

Bucket span: 1h.

Function: `high_count`.
////

source_ip_url_count_ecs::

* For HTTP web access logs where `event.dataset` is `apache.access`.
* Models the event rate of HTTP requests by source IP.
* Detects source IPs with unusually high distinct count of URLs in the HTTP 
access log (using the <<ml-distinct-count,`high_distinct_count` function>>).

////
Influencers:

* `source.address`

Bucket span: 1h.

Function: `high_distinct_count`.
////

status_code_rate_ecs::

* For HTTP web access logs where `event.dataset` is `apache.access`.
* Models the occurrences of HTTP response status codes (`partition_field_name` 
  is `http.response.status_code`).
* Detects unusual status code rates in the HTTP access log compared to previous 
  rates (using the <<ml-count,`count` function>>).

////
Influencers:

* `http.response.status_code` 
* `source.address`

Bucket span: 15m.

Function: `count`.
////

visitor_rate_ecs::

* For HTTP web access logs where `event.dataset` is `apache.access`.
* Models visitor rates.
* Detects unusual visitor rates in the HTTP access log ompared to previous 
  rates (using the <<ml-nonzero-count,`non_zero_count` function>>).

////
Bucket span: 15m.

Function: `non_zero_count`.
////
// end::apache-jobs[]

[float]
[[ootb-ml-jobs-apm]]
=== APM
These {anomaly-job} wizards appear in {kib} if you have data from APM Agents or an APM Server stored in {es}.

// tag::apm-jobs[]
abnormal_span_durations_jsbase::
abnormal_span_durations_nodejs::

* For data from {apm-rum-agents} or {apm-node-agents} (where `agent.name` is `js-base` or `nodejs`).
* Models the duration of spans (`partition_field_name` is `span.type`).
* Detects for spans that are taking longer than usual to process (using the 
  <<ml-metric-mean,`high_mean` function>>).

////
Influencers:

* `service.name` 
* `span.name`
* `span.type` 
* `trace.id`

Bucket span: 15m.

Function: `high_mean`.
////

abnormal_trace_durations_nodejs::

* For data from {apm-node-agents} (where `agent.name` is `nodejs`).
* Models the duration of trace transactions.
* Detects trace transactions that are processing slower than usual (using the 
  <<ml-metric-mean,`high_mean` function>>).

////
Influencers:

* `service.name` 
* `trace.id`
* `transaction.name` 

Bucket span: 15m.

Function: `high_mean`.
////

anomalous_error_rate_for_user_agents_jsbase::

* For data from {apm-rum-agents} (where `agent.name` is `js-base`).
* Models the error rate of user agents (`partition_field_name` is 
  `user_agent.name`).
* Detects user agents that are encountering errors at an above normal rate 
  (using the <<ml-nonzero-count,`high_non_zero_count` function>>).
  
This job can help detect browser compatibility issues.

////
Influencers:

* `user_agent.name`
* `error.exception.message.keyword`
* `error.page.url`
* `service.name`

Bucket span: 15m.

Function: `high_non_zero_count`.
////

decreased_throughput_jsbase::
decreased_throughput_nodejs::

* For data from {apm-rum-agents} or {apm-node-agents} (where `agent.name` is `js-base` or `nodejs`).
* Models the transaction rate of the application.
* Detects periods during which the application is processing fewer requests 
than normal (using the <<ml-count,`low_count` function>>).

////
Influencers:

* `service.name`
* `transaction.name`

Bucket span: 15m.

Function: `low_count`.
////

high_count_by_user_agent_jsbase::

* For data from {apm-rum-agents} (where `agent.name` is `js-base`).
* Models the request rate of user agents (`partition_field_name` is 
  `user_agent.name`).
* Detects user agents that are making requests at a suspiciously high rate 
  (using the <<ml-nonzero-count,`high_non_zero_count` function>>).

This job is useful in identifying bots.

////
Influencers:

* `service.name`
* `user_agent.name`

Bucket span: 15m.

Function: `high_non_zero_count`.
////

high_mean_response_time::

* For transaction data where `processor.event` is `transaction` and 
`transaction.type` is `request`.
* Models response time duration of transactions.
* Detects anomalies in high mean of transaction duration (using the 
  <<ml-metric-mean,`high_mean` function>>).

////
Bucket span: 15m.

Function: `high_mean`.
////
// end::apm-jobs[]

[float]
[[ootb-ml-jobs-auditbeat]]
=== Auditbeat

// tag::auditbeat-jobs[]
These {anomaly-job} wizards appear in {kib} if you use 
{auditbeat-ref}/index.html[{auditbeat}] to audit process activity on your 
systems.

docker_high_count_process_events_ecs::

* For Auditbeat data where `event.module` is `auditd` and `container.runtime` is 
`docker`.
* Models process execution rates (`partition_field_name` is `container.name`).
* Detects unusual increases in process execution rates in Docker containers 
  (using the <<ml-count,`high_count` function>>).

////
Influencers:

* `container.name`
* `process.executable`

Bucket span: 1h.

Function: `high_count`.
////

docker_rare_process_activity_ecs::

* For Auditbeat data where `event.module` is `auditd` and `container.runtime` is 
`docker`.
* Models occurrences of process execution (`partition_field_name` is 
  `container.name`).
* Detects rare process executions in Docker containers (using the 
  <<ml-rare,`rare` function>>).

////
Influencers:

* `container.name`
* `process.executable`

Bucket span: 1h.

Function: `rare`.
////

hosts_high_count_process_events_ecs::

* For Auditbeat data where `event.module` is `auditd`.
* Models process execution rates (`partition_field_name` is `host.name`).
* Detects unusual increases in process execution rates (using the 
  <<ml-nonzero-count,`high_non_zero_count` function>>).

////
Influencers:

* `host.name`
* `process.executable`

Bucket span: 1h.

Function: `high_non_zero_count`.
////

hosts_rare_process_activity_ecs::

* For Auditbeat data where `event.module` is `auditd`.
* Models process execution rates (`partition_field_name` is `host.name`).
* Detects rare process executions on hosts (using the 
  <<ml-rare,`rare` function>>).

////
Influencers:

* `host.name`
* `process.executable`

Bucket span: 1h.

Function: `rare`.
////
// end::auditbeat-jobs[]

[float]
[[ootb-ml-jobs-logs-ui]]
=== Logs UI

// tag::logs-jobs[]
These {anomaly-jobs} appear by default in the {kibana-ref}/xpack-logs.html[Logs app] in {kib}. 

log_entry_categories_count::

* For log entry categories via the Logs UI.
* Models the occurrences of log events (`partition_field_name` is 
  `event.dataset`).
* Detects anomalies in count of log entries by category (using the 
  <<ml-count,`count` function>>).

////
Influencers:

* `event.dataset`
* `mlcategory`

Bucket span: 15m.

Function: `count`.
////

log_entry_rate::

* For log entries via the Logs UI.
* Models ingestion rates (`partition_field_name` is `event.dataset`). 
* Detects anomalies in the log entry ingestion rate (using the 
  <<ml-count,`low_count` function>>).

////
Influencers:

* `event.dataset`

Bucket span: 15m.

Function: `count`.
////
// end::logs-jobs[]

[float]
[[ootb-ml-jobs-metricbeat]]
=== Metricbeat

// tag::metricbeat-jobs[]
These {anomaly-job} wizards appear in {kib} if you use the 
{metricbeat-ref}/metricbeat-module-system.html[{metricbeat} system module] to 
monitor your servers.

high_mean_cpu_iowait_ecs::

* For {metricbeat} data where `event.dataset` is `system.cpu` and 
  `system.filesystem`.
* Models CPU time spent in iowait (`partition_field_name` is `host.name`).
* Detects unusual increases in cpu time spent in iowait (using the 
  <<ml-metric-mean,`high_mean` function>>).

////
Influencers:

* `host.name`

Bucket span: 10m.

Function: `high_mean`.
////

max_disk_utilization_ecs::

* For {metricbeat} data where `event.dataset` is `system.cpu` and 
  `system.filesystem`.
* Models disc utilization (`partition_field_name` is `host.name`).
* Detects unusual increases in disk utilization (using the 
  <<ml-metric-max,`max` function>>).

////
Influencers:

* `host.name`

Bucket span: 10m.

Function: `max`.
////

metricbeat_outages_ecs::

* For {metricbeat} data where `event.dataset` is `system.cpu` and 
  `system.filesystem`.
* Models counts of {metricbeat} documents 
  (`partition_field_name` is `event.dataset`).
* Detects unusual decreases in {metricbeat} documents (using the 
  <<ml-count,`low_count` function>>).

////
Influencers:

* `event.dataset`

Bucket span: 10m.

Function: `low_count`.
////
// end::metricbeat-jobs[]

[float]
[[ootb-ml-jobs-nginx]]
=== Nginx

// tag::nginx-jobs[]
These {anomaly-job} wizards appear in {kib} if you use {filebeat} to ship access 
logs from your http://nginx.org/[Nginx] HTTP servers to {es} and store it using 
fields and datatypes from the Elastic Common Schema (ECS).

low_request_rate_ecs::

* For HTTP web access logs where `event.dataset` is `nginx.access`.
* Models the event rate of http requests. 
* Detects unusually low counts of HTTP requests compared to the previous event 
  rate (using the <<ml-count,`low_count` function>>).

////
Bucket span: 15m.

Function: `low_count`.
////

source_ip_request_rate_ecs::

* For HTTP web access logs where `event.dataset` is `nginx.access`.
* Models the event rate of HTTP requests by source IP.
* Detects source IPs with unusually high request rates in the HTTP access log 
  compared to the previous rate (using the <<ml-count,`high_count` function>>). 

////
Influencers:

* `source.address`

Bucket span: 1h.

Function: `high_count`.
////

source_ip_url_count_ecs::

* For HTTP web access logs where `event.dataset` is `nginx.access`.
* Models the event rate of HTTP requests by source IP.
* Detects source IPs with unusually high distinct count of URLs in the HTTP 
  access log (using the <<ml-distinct-count,`high_distinct_count` function>>).

////
Influencers:

* `source.address`

Bucket span: 1h.

Function: `high_distinct_count`.
////

status_code_rate_ecs::

* For HTTP web access logs where `event.dataset` is `nginx.access`.
* Models the occurrences of HTTP response status codes (`partition_field_name` 
  is `http.response.status_code`).
* Detects unusual status code rates in the HTTP access log compared to previous 
  rates (using the <<ml-count,`count` function>>).

////
Influencers:

* `http.response.status_code` 
* `source.address`

Bucket span: 15m.

Function: `count`.
////

visitor_rate_ecs::

* For HTTP web access logs where `event.dataset` is `nginx.access`.
* Models visitor rates.
* Detects unusual visitor rates in the HTTP access log ompared to previous 
  rates (using the <<ml-nonzero-count,`non_zero_count` function>>).

////
Bucket span: 15m.

Function: `non_zero_count`.
////
// end::nginx-jobs[]

[float]
[[ootb-ml-jobs-siem]]
=== SIEM

// tag::siem-jobs[]
These {anomaly-jobs} appear by default in the Anomaly Detection interface of the 
{siem-guide}/machine-learning.html[SIEM app] in {kib}. They help you 
automatically detect file system and network anomalies on your hosts. The list 
below contains the jobs organized by `agent.type` (Auditbeat, Packetbeat, and 
Winlogbeat).

[float]
[[ootb-ml-jobs-siem-audit]]
==== SIEM - Auditbeat

linux_anomalous_network_activity_ecs::

* For network activity logs where `agent.type` is `auditbeat`.
* Models the occurrences of processes that cause network activity.
* Detects network activity caused by processes that occur rarely compared to 
  other processes (using the <<ml-rare,`rare` function>>).

Looks for unusual processes using the network which could indicate
command-and-control, lateral movement, persistence, or data exfiltration
activity.

////
Influencers:

* `destination.ip`
* `host.name` 
* `process.name`
* `user.name`

Bucket span: 15m.

Function: `rare`.
////

linux_anomalous_network_port_activity_ecs::

* For network activity logs where `agent.type` is `auditbeat`.
* Models destination port activity.
* Detects destination port activity that occurs rarely compared to other port 
  activities (using the <<ml-rare,`rare` function>>).

Looks for unusual destination port activity that could indicate 
command-and-control, persistence mechanism, or data exfiltration activity.

////
Influencers:

* `destination.ip`
* `host.name` 
* `process.name`
* `user.name`

Bucket span: 15m.

Function: `rare`.
////

linux_anomalous_network_service::

* For network activity logs where `agent.type` is `auditbeat`.
* Models listening port activity.
* Detects unusual listening port activity that occurs rarely compared to 
  other port activities (using the <<ml-rare,`rare` function>>).

Looks for unusual listening ports that could indicate execution of unauthorized 
services, backdoors, or persistence mechanisms.

////
Influencers:

* `host.name` 
* `process.name`
* `user.name`

Bucket span: 15m.

Function: `rare`.
////

linux_anomalous_network_url_activity_ecs::

* For network activity logs where `agent.type` is `auditbeat`.
* Models the occurrences of URL requests.
* Detects unusual web URL request that is rare compared to other web URL 
  requests (using the <<ml-rare,`rare` function>>).

Looks for an unusual web URL request from a Linux instance. Curl and wget web 
request activity is very common but unusual web requests from a Linux server can 
sometimes be malware delivery or execution.

////
Influencers:

* `destination.ip`
* `destination.port` 
* `host.name`

Bucket span: 15m.

Function: `rare`.
////

linux_anomalous_process_all_hosts_ecs::

* For host activity logs where `agent.type` is `auditbeat`.
* Models the occurrences of processes on all hosts.
* Detects processes that occur rarely compared to other processes to all 
  Linux/Windows hosts (using the <<ml-rare,`rare` function>>).

Looks for processes that are unusual to all Linux hosts. Such unusual processes 
may indicate unauthorized services, malware, or persistence mechanisms.

////
Influencers:

* `host.name` 
* `process.name`
* `user.name`

Bucket span: 15m.

Function: `rare`.
////

linux_anomalous_user_name_ecs::

* For host activity logs where `agent.type` is `auditbeat`.
* Models user activity.
* Detects users that are rarely or unusually active compared to other users 
  (using the <<ml-rare,`rare` function>>).

Rare and unusual users that are not normally active may indicate unauthorized 
changes or activity by an unauthorized user which may be credentialed access or 
lateral movement.

////
Influencers:

* `host.name` 
* `process.name`
* `user.name`

Bucket span: 15m.

Function: `rare`.
////

rare_process_by_host_linux_ecs::

* For host activity logs where `agent.type` is `auditbeat`.
* Models occurrences of process activities on the host. 
* Detect unusually rare processes compared to other processes on Linux (using 
  the <<ml-rare,`rare` function>>).

////
Influencers:

* `host.name` 
* `process.name`
* `user.name`

Bucket span: 15m.

Function: `rare`.
////

suspicious_login_activity_ecs::

* For host activity logs where `agent.type` is `auditbeat`.
* Models occurrences of authentication attempts (`partition_field_name` is 
  `host.name`).
* Detects unusually high number of authentication attempts (using the 
  <<ml-nonzero-count,`high_non_zero_count` function>>).

////
Influencers:

* `host.name` 
* `source.ip`
* `user.name`

Bucket span: 15m.

Function: `high_non_zero_count`.
////


[float]
[[ootb-ml-jobs-siem-packet]]
==== SIEM - Packetbeat

packetbeat_dns_tunneling::

* For network activity logs where `agent.type` is `packetbeat`.
* Models occurrances of DNS activity.
* Detects unusual DNS activity (using the 
  <<ml-info-content,`high_info_content` function>>).

Looks for unusual DNS activity that could indicate command-and-control or data 
exfiltration activity.

////
Influencers:

* `destination.ip`
* `dns.question.etld_plus_one`
* `host.name`

Bucket span: 15m.

Function: `high_info_content`.
////

packetbeat_rare_dns_question::

* For network activity logs where `agent.type` is `packetbeat`.
* Models occurrences of DNS activity.
* Detects DNS activity that is rare compared to other DNS activities (using the 
  <<ml-rare,`rare` function>>).

Looks for unusual DNS activity that could indicate command-and-control activity.

////
Influencers:

* `host.name`

Bucket span: 15m.

Function: `rare`.
////

packetbeat_rare_server_domain::

* For network activity logs where `agent.type` is `packetbeat`.
* Models HTTP or TLS domain activity.
* Detects HTTP or TLS domain activity that is rarely occurs compared to other 
  activities (using the <<ml-rare,`rare` function>>).

Looks for unusual HTTP or TLS destination domain activity that could indicate 
execution, persistence, command-and-control or data exfiltration activity.

////
Influencers:

* `destination.ip`
* `host.name`
* `source.ip`

Bucket span: 15m.

Function: `rare`.
////

packetbeat_rare_urls::

* For network activity logs where `agent.type` is `packetbeat`.
* Models occurrences of web browsing URL activity.
* Detects URL activity that rarely occurs compared to other URL activities 
  (using the <<ml-rare,`rare` function>>).

Looks for unusual web browsing URL activity that could indicate execution, 
persistence, command-and-control or data exfiltration activity.

////
Influencers:

* `destination.ip`
* `host.name`

Bucket span: 15m.

Function: `rare`.
////

packetbeat_rare_user_agent::

* For network activity logs where `agent.type` is `packetbeat`.
* Models occurrences of HTTP user agent activity.
* Detects HTTP user agent activity that occurs rarely compared to other HTTP 
  user agent activities (using the <<ml-rare,`rare` function>>).

Looks for unusual HTTP user agent activity that could indicate execution, 
persistence, command-and-control or data exfiltration activity.

////
Influencers:

* `destination.ip`
* `host.name`

Bucket span: 15m.

Function: `rare`.
////

[float]
[[ootb-ml-jobs-siem-winlog]]
==== SIEM - Winlogbeat

windows_anomalous_network_activity_ecs::

* For network activity logs where `agent.type` is `winlogbeat`.
* Models the occurrences of processes that cause network activity.
* Detects network activity caused by processes that occur rarely compared to 
  other processes (using the <<ml-rare,`rare` function>>).

Looks for unusual processes using the network which could indicate
command-and-control, lateral movement, persistence, or data exfiltration
activity.

////
Influencers:

* `destination.ip`
* `host.name` 
* `process.name`
* `user.name`

Bucket span: 15m.

Function: `rare`.
////

windows_anomalous_process_all_hosts_ecs::

* For host activity logs where `agent.type` is `winlogbeat`.
* Models the occurrences of processes on all hosts.
* Detects processes that occur rarely compared to other processes to all 
  Linux/Windows hosts (using the <<ml-rare,`rare` function>>).

Looks for processes that are unusual to all Windows hosts. Such unusual 
processes may indicate unauthorized services, malware, or persistence 
mechanisms.

////
Influencers:

* `host.name` 
* `process.name`
* `user.name`

Bucket span: 15m.

Function: `rare`.
////

windows_anomalous_user_name_ecs::

* For host activity logs where `agent.type` is `winlogbeat`.
* Models user activity.
* Detects users that are rarely or unusually active compared to other users 
  (using the <<ml-rare,`rare` function>>).

Rare and unusual users that are not normally active may indicate unauthorized 
changes or activity by an unauthorized user which may be credentialed access or 
lateral movement.

////
Influencers:

* `host.name` 
* `process.name`
* `user.name`

Bucket span: 15m.

Function: `rare`.
////

rare_process_by_host_windows_ecs::

* For host activity logs where `agent.type` is `winlogbeat`.
* Models occurrences of process activities on the host. 
* Detect unusually rare processes compared to other processes on Windows (using 
  the <<ml-rare,`rare` function>>).

////
Influencers:

* `host.name` 
* `process.name`
* `user.name`

Bucket span: 15m.

Function: `rare`.
////

windows_anomalous_path_activity_ecs::

* For host activity logs where `agent.type` is `winlogbeat`.
* Models occurrences of processes in paths.
* Detects activity in unusual paths (using the <<ml-rare,`rare` function>>).

Activities in unusual paths may indicate execution of malware or persistence 
mechanisms. Windows payloads often execute from user profile paths.

////
Influencers:

* `host.name` 
* `process.name`
* `user.name`

Bucket span: 15m.

Function: `rare`.
////

windows_anomalous_process_creation::

* For host activity logs where `agent.type` is `winlogbeat`.
* Models occurrences of process creation activities (`partition_field_name` is 
  `process.parent.name`).
* Detects process relationships that are rare compared to other process 
  relationships (using the <<ml-rare,`rare` function>>).

Looks for unusual process relationships which may indicate execution of malware 
or persistence mechanisms.

////
Influencers:

* `host.name` 
* `process.name`
* `user.name`

Bucket span: 15m.

Function: `rare`.
////

windows_anomalous_script::

* For host activity logs where `agent.type` is `winlogbeat`.
* Models occurrences of powershell script activities.
* Detects unusual powershell script execution compared to other powershell 
  script activities (using the 
  <<ml-info-content,`high_info_content` function>>).

Looks for unusual powershell scripts that may indicate execution of malware, or 
persistence mechanisms.

////
Influencers:

* `host.name` 
* `user.name`
* `winlog.event_data.Path`

Bucket span: 15m.

Function: `high_info_content`.
////

windows_anomalous_service::

* For host activity logs where `agent.type` is `winlogbeat`.
* Models occurrences of Windows service activities.
* Detects Windows service activities that occur rarely compared to other Windows 
  service activities (using the <<ml-rare,`rare` function>>).

Looks for rare and unusual Windows services which may indicate execution of 
unauthorized services, malware, or persistence mechanisms.

////
Influencers:

* `host.name` 
* `winlog.event_data.ServiceName`

Bucket span: 15m.

Function: `rare`.
////

windows_rare_user_runas_event::

* For host activity logs where `agent.type` is `winlogbeat`.
* Models occurrences of user context switches.
* Detects user context switches that occur rarely compared to other user context 
  switches (using the <<ml-rare,`rare` function>>).

Unusual user context switches can be due to privilege escalation.

////
Influencers:

* `host.name` 
* `process.name`
* `user.name`

Bucket span: 15m.

Function: `rare`.
////

windows_rare_user_type10_remote_login::

* For host activity logs where `agent.type` is `winlogbeat`.
* Models occurrences of user remote login activities.
* Detects user remote login activities that occur rarely compared to other 
  user remote login activities (using the <<ml-rare,`rare` function>>).

Looks for unusual user remote logins. Unusual RDP (remote desktop protocol) 
user logins can indicate account takeover or credentialed access.

////
Influencers:

* `host.name` 
* `process.name`
* `user.name`

Bucket span: 15m.

Function: `rare`.
////
// end::siem-jobs[]
