[[ml-nlp-overview]]
= Overview

{nlp-cap} (NLP) refers to the way in which we can use software to understand
natural language in spoken word or written text.

Classically, NLP was performed using linguistic rules, dictionaries, regular
expressions, and {ml} for specific tasks such as automatic categorization or
summarization of text. In recent years, however, deep learning techniques have
taken over much of the NLP landscape. Deep learning capitalizes on the
availability of large scale data sets, cheap computation, and techniques for
learning at scale with less human involvement. Pre-trained language models that
use a transformer architecture have been particularly successful. For example,
BERT is a pre-trained language model that was released by Google in 2018. Since
that time, it has become the inspiration for most of today’s modern NLP
techniques. The {stack} {ml} features are structured around BERT and
transformer models. These features support BERT’s tokenization scheme (called
WordPiece) and transformer models that conform to the standard BERT model
interface.

To incorporate transformer models and make predictions, {es} uses libtorch,
which is an underlying native library for PyTorch. Trained models must be in a
TorchScript representation for use with {stack} {ml} features.

As in the cases of <<ml-dfa-classification,classification>> and
<<ml-dfa-regression,regression>>, after you deploy a model to your cluster, you
can use it to make predictions (also known as _inference_) against incoming data.
You can perform the following NLP tasks:

Extract information::
* <<ml-nlp-ner>> enables you to identify and categorize entities in your text.
* <<ml-nlp-mask>> enable you to predict missing words in text sequences.

Categorize text::
* <<ml-nlp-lang-ident,Language identification>> enables you to determine the
language of text.
* _Text classification_ enables you to classify input text.
* _Zero-shot text classification_ performs classification without requiring a
specialized model.

Search and compare text::
* _Text embedding_ turns content into vectors, which enables you to compare text
by using mathematical functions.
