[role="xpack"]
[testenv="platinum"]
[[flightdata-classification]]
=== Predicting delaying flights with {classanalysis}

Let's try to predict whether a flight will be delayed or not by using the 
{kibana-ref}/add-sample-data.html[sample flight data]. We use this data to learn 
a {classification} model that allows us to make the prediction based on 
information such as weather conditions and location of the destination and 
origin, flight distance and carrier.

This dataset consists of sample data that has been manually created and it 
contains inconsistencies. For example, a flight can be both delayed and 
canceled. Nonetheless, the use case is relevant and it is a good example of how 
the quality of input data will affect the quality of results.

We create a {dfanalytics-job} to predict if a given flight is delayed. This 
information is recorded as a boolean true/false variable on the field 
`FlightDelay`. Each document in the dataset contains details for a single 
flight, so this data is ready for analysis as it is already in a two-dimensional 
entity-based data structure (_{dataframe}_). In general, you often need to 
{ref}/transforms.html[transform] the data into an entity-centric index before 
you analyze the data.

This is an example source document from the dataset:

```
{
  "_index": "kibana_sample_data_flights",
  "_type": "_doc",
  "_id": "S-JS1W0BJ7wufFIaPAHe",
  "_version": 1,
  "_seq_no": 3356,
  "_primary_term": 1,
  "found": true,
  "_source": {
    "FlightNum": "N32FE9T",
    "DestCountry": "JP",
    "OriginWeather": "Thunder & Lightning",
    "OriginCityName": "Adelaide",
    "AvgTicketPrice": 499.08518599798685,
    "DistanceMiles": 4802.864932998549,
    "FlightDelay": false,
    "DestWeather": "Sunny",
    "Dest": "Chubu Centrair International Airport",
    "FlightDelayType": "No Delay",
    "OriginCountry": "AU",
    "dayOfWeek": 3,
    "DistanceKilometers": 7729.461862731618,
    "timestamp": "2019-10-17T11:12:29",
    "DestLocation": {
      "lat": "34.85839844",
      "lon": "136.8049927"
    },
    "DestAirportID": "NGO",
    "Carrier": "ES-Air",
    "Cancelled": false,
    "FlightTimeMin": 454.6742272195069,
    "Origin": "Adelaide International Airport",
    "OriginLocation": {
      "lat": "-34.945",
      "lon": "138.531006"
    },
    "DestRegion": "SE-BD",
    "OriginAirportID": "ADL",
    "OriginRegion": "SE-BD",
    "DestCityName": "Tokoname",
    "FlightTimeHour": 7.577903786991782,
    "FlightDelayMin": 0
  }
}
```

{classification-cap} is a supervised machine learning analysis and therefore 
needs to train on data that contains the ground truth, known as the 
`dependent_variable`. In this example, the ground truth is available in each 
document as the actual value of `FlightDelay`.

If your source data consists of some documents that contain a 
`dependent_variable` and some that do not, the model is trained on the 
`training_percent` of the documents that contain ground truth. However, 
predictions are made against all of the data. The current implementation of 
{classanalysis} supports a single batch analysis for both training and 
predictions.


. Create a {dfanalytics-job}.
+
--
Use the {ref}/put-dfanalytics.html[create {dfanalytics-jobs}] API as you can see 
in the following example:

[source,console]
--------------------------------------------------
PUT _ml/data_frame/analytics/model-delayed-flights
{
  "source": {
    "index": [
      "kibana_sample_data_flights"  <1>
    ],
    "query": {  <2>
      "range": {
        "DistanceKilometers": { 
          "gt": 0
        }
      }
    }
  },
  "dest": {
    "index": "df-flight-delayed",  <3>
    "results_field": "ml" 
  },
  "analysis": {
    "classification": {
      "dependent_variable": "FlightDelay",  <4>
      "training_percent": 10  <5>
    }
  },
  "analyzed_fields": {
    "includes": [],
    "excludes": [    <6>
      "Cancelled",
      "FlightDelayMin",
      "FlightDelayType"
    ]
  },
  "model_memory_limit": "100mb" <7>
}
--------------------------------------------------
// TEST[skip:setup kibana sample data]

<1> The source index to analyze.
<2> This query removes erroneous data from the analysis to improve its quality.
<3> The index that will contain the results of the analysis; it will consist of 
a copy of the source index data where each document is annotated with the 
results.
<4> Specifies the variable we want to predict with the {classanalysis}.
<5> Specifies the proportion of data that is used for training the model. In 
this example we use 10% of the source data. The training data is randomly 
selected and provide predictions from the remaining 90%. These percentages are 
approximate. For most of the datasets, even a small proportion of the training 
data (2-5%) results in good predictions.
<6> Specifies fields to be excluded from the analysis. It is recommended to 
exclude fields that either contain erroneous data or describe the 
`dependent_variable`.
<7> Specifies a memory limit for the job. If the job requires more than this 
amount of memory, it fails to start. This makes it possible to prevent job 
execution if the available memory on the node is limited.


The API returns the following response:

[source,console-result]
--------------------------------------------------  
{
  "id" : "model-delayed-flights",
  "source" : {
    "index" : [
      "kibana_sample_data_flights"
    ],
    "query" : {
      "range" : {
        "DistanceKilometers" : {
          "gt" : 0
        }
      }
    }
  },
  "dest" : {
    "index" : "df-flight-delayed",
    "results_field" : "ml"
  },
  "analysis" : {
    "classification" : {
      "dependent_variable" : "FlightDelay",
      "num_top_classes" : 2,
      "prediction_field_name" : "FlightDelay_prediction",
      "training_percent" : 70.0
    }
  },
  "analyzed_fields" : {
    "includes" : [ ],
    "excludes" : [
      "Cancelled",
      "FlightDelayMin",
      "FlightDelayType"
    ]
  },
  "model_memory_limit" : "100mb",
  "create_time" : 1574165518647,
  "version" : "7.5.0",
  "allow_lazy_start" : false
}
--------------------------------------------------
--

. Start the job.
+
--
Use the {ref}/start-dfanalytics.html[start {dfanalytics-jobs}] API to start the 
job. It will stop automatically when the analysis is complete, you don't need to 
stop it manually.

[source,console]
--------------------------------------------------
POST _ml/data_frame/analytics/model-delayed-flights/_start
--------------------------------------------------
// TEST[skip:TBD]


The job takes a few minutes to run. Runtime depends on the local hardware and 
also on the number of documents and fields that are analyzed. The more fields 
and documents, the longer the job to run.
--

. Check the job stats to follow the progress by using the 
{ref}/get-dfanalytics-stats.html[get {dfanalytics-jobs} statistics API].
+
--

[source,console]
--------------------------------------------------
GET _ml/data_frame/analytics/model-delayed-flights/_stats
--------------------------------------------------
// TEST[skip:TBD]


The API call returns the following response: 

[source,console-result]
----  
{
  "count" : 1,
  "data_frame_analytics" : [
    {
      "id" : "model-delayed-flights",
      "state" : "stopped",
      "progress" : [
        {
          "phase" : "reindexing",
          "progress_percent" : 100
        },
        {
          "phase" : "loading_data",
          "progress_percent" : 100
        },
        {
          "phase" : "analyzing",
          "progress_percent" : 100
        },
        {
          "phase" : "writing_results",
          "progress_percent" : 100
        }
      ]
    }
  ]
}
----  

The job has four phases. When all the phases have completed, the job 
state becomes `stopped` and the results are ready to view and evaluate.
--


[[flightdata-classification-results]]
==== Viewing results

. Use the standard {es} search command to view the results in the destination 
index:
+
--

[source,console]
--------------------------------------------------
GET df-flight-delayed/_search
--------------------------------------------------
// TEST[skip:TBD]


The snippet below shows a part of a document with the annotated results:

[source,console-result]
----  
          ...
          "FlightDelay" : false, <1>
          "DistanceMiles" : 8865.200239823978,
          "FlightTimeMin" : 792.6198230421824,
          "OriginWeather" : "Cloudy",
          "dayOfWeek" : 1,
          "AvgTicketPrice" : 816.1058877497752,
          "Carrier" : "Kibana Airlines",
          "FlightDelayMin" : 0,
          "OriginRegion" : "CO-CUN",
          "FlightDelayType" : "No Delay",
          "DestAirportID" : "NRT",
          "timestamp" : "2019-11-12T17:06:35",
          "Dest" : "Narita International Airport",
          "FlightTimeHour" : 13.210330384036373,
          "Cancelled" : false,
          "DistanceKilometers" : 14267.156814759282,
          "OriginCityName" : "Bogota",
          "DestWeather" : "Sunny",
          "OriginCountry" : "CO",
          "ml__id_copy" : "-7OQg24B95sXiIrm0EZo",
          "DestCountry" : "JP",
          "DestRegion" : "SE-BD",
          "OriginAirportID" : "BOG",
          "DestCityName" : "Tokyo",
          "ml" : {
            "top_classes" : [ <2>
              {
                "class_probability" : 0.939335365058496, <3>
                "class_name" : "false" <4>
              },
              {
                "class_probability" : 0.06066463494150393, <5>
                "class_name" : "true"
              }
            ],
            "FlightDelay_prediction" : "false", <6>
            "is_training" : false <7>
          }
----
<1> The `dependent_variable` with the ground truth value. This is what we are 
trying to predict with the {classanalysis}.
<2> The top classes object contains the predicted classes with the highest 
probability.
<3> The probability that `FlightDelay` is false (the larger probability of the 
two, hence this is the predicted class). This is a value between 0 and 1. The 
higher the number the higher the probability that the datapoint belongs to the 
class.
<4> Name of the class.
<5> The probability that `FlightDelay` is true.
<6> The prediction. The field name is suffixed with `_prediction` by default. 
You can specify the field name by defining `prediction_field_name` via the API. 
<7> Indicates that this document was not used in the training set.

The example above shows that the analysis has predicted the probability of all 
possible classes. In this case, there are two classes: `true` and `false`. The 
class names along with the probability of the given classes are displayed in the 
`top_classes` object. The most probable class is the prediction. In the example 
above, `false` has a `class_probability` of 0.93 while `true` has only 0.06, so 
the prediction will be `false` which coincides with the ground truth contained 
by the `FlightDelay` field. The class probability values help you understand how 
sure the model is about the prediction. The higher number means that the model 
is more confident.

If a document doesn't contain a prediction field, then it is excluded from the 
analysis. In order to be analyzed, a document must contain at least one field 
with a supported data type (`numeric`, `boolean`, `text`, `keyword` or `ip`) and 
must not contain arrays with more than one item.
--


[[flightdata-classification-evaluate]]
==== Evaluating results

The results can be evaluated for documents which contain both the ground truth 
field and the prediction. In the example below, `FlightDelay` contains the 
ground truth and the prediction is stored as `FlightDelay_prediction`.

. Use the {dfanalytics} evaluate API to evaluate the results.
+
--
First, we want to know the training error that represents how well the model 
performed on the training dataset:

[source,console]
--------------------------------------------------
POST _ml/data_frame/_evaluate
{
 "index": "df-flight-delayed",  <1>
   "query": {
    "term": {
      "ml.is_training": {
        "value": true  <2>
      }
    }
  },
 "evaluation": {
   "classification": {
     "actual_field": "FlightDelay",  <3>
     "predicted_field": "ml.FlightDelay_prediction",  <4>
     "metrics": {  
       "multiclass_confusion_matrix" : {}
     }
   }
 }
}
--------------------------------------------------
// TEST[skip:TBD]

<1> The destination index which is the output of the analysis job.
<2> We calculate the training error by only evaluating the training data.
<3> The field that contains the ground truth label.
<4> The field that contains the predicted value.

Next, we calculate the generalization error that represents how well the model 
performed on previously unseen data:

[source,console]
--------------------------------------------------
POST _ml/data_frame/_evaluate
{
 "index": "df-flight-delayed",
   "query": {
    "term": {
      "ml.is_training": {
        "value": false  <1>
      }
    }
  },
 "evaluation": {
   "classification": {
     "actual_field": "FlightDelay",
     "predicted_field": "ml.FlightDelay_prediction",
     "metrics": {  
       "multiclass_confusion_matrix" : {}
     }
   }
 }
}
--------------------------------------------------
// TEST[skip:TBD]

<1> By only evaluating the data that was not used in training, we can 
calculate the generalization error which shows the algorithm accuracy in making 
predictions for previously unseen data.

The API call returns the following response:

[source,console-result]
--------------------------------------------------
{
  "classification" : {
    "multiclass_confusion_matrix" : {
      "confusion_matrix" : [
        {
          "actual_class" : "false", <1>
          "actual_class_doc_count" : 912, <2>
          "predicted_classes" : [
            {
              "predicted_class" : "false", <3>
              "count" : 755 <4>
            },
            {
              "predicted_class" : "true",
              "count" : 157
            }
          ],
          "other_predicted_class_doc_count" : 0
        },
        {
          "actual_class" : "true",
          "actual_class_doc_count" : 306,
          "predicted_classes" : [
            {
              "predicted_class" : "false",
              "count" : 80
            },
            {
              "predicted_class" : "true",
              "count" : 226
            }
          ],
          "other_predicted_class_doc_count" : 0
        }
      ],
      "other_actual_class_count" : 0
    }
  }
}
--------------------------------------------------
<1> The name of the actual class. In this example, there are two actual classes: 
`true` and `false`.
<2> The number of documents in the dataset that belong to the actual class.
<3> The name of the predicted class.
<4> The number of documents belong to the actual class that are labelled as the 
predicted class. 

The returned confusion matrix shows us how many datapoints were classified 
correctly (where the `actual_class` matches the `predicted_class`) and how many 
were misclassified (`actual_class` does not match `predicted_class`). There are 
912 documents in the dataset that have the `false` class. The model labelled 755 
documents (out of 912) correctly as `false` and 157 documents as `true` while 
those are actually `false`. There are 306 documents in the dataset that have the 
`true` class. 80 of them are predicted as `false` and 226 are predicted 
correctly as `true`.
--