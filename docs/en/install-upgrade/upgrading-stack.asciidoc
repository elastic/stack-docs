[[upgrading-elastic-stack]]
== Upgrade to Elastic {version}

Before you upgrade to {version}, it's important to take some preparation steps.
ifeval::["{version}"!="8.0.0"]
These steps vary based on your current version:

* <<prepare-to-upgrade-8x,Upgrade from an earlier 8.x version>>
* <<prepare-to-upgrade,Upgrade from 7.x>>
endif::[]

[IMPORTANT]
.Out-of-order releases
====
Elastic maintains several minor versions of the Elastic Stack at once. This
means releases do not always happen in order of their version numbers. You can
only upgrade to {version} if the version you are currently running meets both
of these conditions:

* Has an older version number than {version}.
* Has an earlier release date than {version}.

If you are currently running a version with an older version number but a later
release date than {version}, wait for a newer release before upgrading.
====

IMPORTANT: Upgrading from a release candidate build, such as 8.0.0-rc1 or
8.0.0-rc2, is not supported. Pre-releases should only be used for testing in a
temporary environment.

ifeval::["{version}"!="8.0.0"]
[discrete]
[[prepare-to-upgrade-8x]]
=== Prepare to upgrade from an earlier 8.x version

. Review the breaking changes for each product you use and make the necessary
changes so your code is compatible with {version}:
+
--
include::breaking.asciidoc[tag=breaking-changes-links]

include::breaking.asciidoc[tag=breaking-changes-admon]
--

include::upgrading-stack.asciidoc[tag=generic-upgrade-steps]
endif::[]

////
// List of upgrade steps used in both 8.x and 7.x
// tag::generic-upgrade-steps[]
. If you use any {es} plugins, make sure there is a version of each plugin that is
compatible with {es} version {version}.

. Test the upgrade in an isolated environment before upgrading your production
  cluster.
+
[IMPORTANT]
--
The upgraded version of {es} may interact with its environment in different
ways from the version you are currently running. It is possible that your
environment behaves incorrectly in a way that does not matter to the version of
{es} that you are currently running, but which does matter to the upgraded
version. In this case, the upgraded version will not work correctly until you
address the incorrect behaviour in your environment.

During your upgrade tests, pay particular attention to the following aspects:

Cluster stability:: Does the new version of {es} form a stable healthy cluster?

Indexing and search performance:: Does the new version of {es} perform the same
(or better) than the current one on your specific workload and data?

Snapshots:: Do all of your snapshot repositories work correctly and pass
{ref}/repo-analysis-api.html[repository analysis]?
--

. Make sure you have a current snapshot before you start the upgrade.
+
IMPORTANT: You cannot downgrade {es} nodes after starting to upgrade your
cluster. If you cannot complete the upgrade process, build a new cluster and
restore a snapshot taken before starting the upgrade.

. If you use a separate {ref}/monitoring-production.html[monitoring cluster],
  upgrade the monitoring cluster before the production cluster.
+
In general, the monitoring cluster and the clusters being monitored should be
running the same version of the stack. A monitoring cluster cannot monitor
production clusters running newer versions of the stack. If necessary, the
monitoring cluster can monitor production clusters running the latest release
of the previous major version.
// end::generic-upgrade-steps[]
////


[discrete]
[[prepare-to-upgrade]]
=== Prepare to upgrade from 7.x

To upgrade to {version} from 7.16 or earlier, **you must first upgrade to {prev-major-last}**.
This enables you to use the **Upgrade Assistant** to identify and resolve issues,
reindex indices created before 7.0, and then perform a rolling upgrade.

**Upgrading to {prev-major-last} before upgrading to {version} is required 
even if you opt to do a full-cluster restart of your {es} cluster.**
Alternatively, you can create a new {version} deployment and reindex from remote.
For more information, see <<upgrading-reindex, Reindex to upgrade>>.

{beats} and {ls} {prev-major-last} are compatible with {es} {version} 
to give you flexibility in scheduling the upgrade.

.Remote cluster compatibility
[NOTE]
====
If you use {ccs}, note that {version} can only search remote clusters running the previous minor version or later. 
For more information, see {ref}/modules-cross-cluster-search.html[Searching across clusters].

If you use {ccr}, a cluster that contains follower indices must run the same or newer version as the remote cluster. 
For more information, see {ref}/xpack-ccr.html[Cross cluster replication] for version compatibility matrix.

You can view your remote clusters from **Stack Management > Remote Clusters**. 
====

. Use the {kibana-ref-all}/{prev-major-last}/upgrade-assistant.html[Upgrade Assistant] 
to prepare for your upgrade from {prev-major-last} to {version}.
The **Upgrade Assistant** identifies deprecated settings and guides
you through resolving issues and reindexing indices created before 7.0.
Make sure you have a current snapshot before making configuration changes
or reindexing.
+
**You must resolve all critical issues before proceeding with the upgrade.**

. Review the deprecation logs from the **Upgrade Assistant** to 
determine if your applications are using features that are not supported 
or behave differently in 8.x.
See the <<elastic-stack-breaking-changes,breaking changes>> for more information 
about changes in {version} that could affect your application.
+
IMPORTANT: Make sure you check the breaking changes for each minor 8.x release
up to {version}.

. Make the recommended changes to ensure that your applications 
continue to operate as expected after the upgrade.
+
NOTE: As a temporary solution, you can submit requests to {major-version}
using the {prev-major-version} syntax with the REST API compatibility mode.
While this enables you to submit requests that use the old syntax, 
it does not guarantee the same behavior. 
REST API compatibility should be a bridge to smooth out the upgrade process,
not a long term strategy. 
For more information, see {ref}/rest-api-compatibility.html[REST API compatibility].

include::upgrading-stack.asciidoc[tag=generic-upgrade-steps]
